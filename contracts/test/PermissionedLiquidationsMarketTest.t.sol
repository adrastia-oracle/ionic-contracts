// SPDX-License-Identifier: UNLICENSED
pragma solidity >=0.8.0;

import { MarketsTest } from "./config/MarketsTest.t.sol";

import { DiamondExtension, DiamondBase } from "../ionic/DiamondExtension.sol";
import { ComptrollerFirstExtension } from "../compound/ComptrollerFirstExtension.sol";
import { PoolDirectory } from "../PoolDirectory.sol";
import { Comptroller } from "../compound/Comptroller.sol";
import { ICErc20 } from "../compound/CTokenInterfaces.sol";
import { CErc20Delegate } from "../compound/CErc20Delegate.sol";
import { CErc20PluginDelegate } from "../compound/CErc20PluginDelegate.sol";
import { CErc20Delegator } from "../compound/CErc20Delegator.sol";
import { FeeDistributor } from "../FeeDistributor.sol";
import { CTokenFirstExtension } from "../compound/CTokenFirstExtension.sol";
import { ComptrollerV3Storage } from "../compound/ComptrollerStorage.sol";
import { IonicComptroller } from "../compound/ComptrollerInterface.sol";

import { IERC20Upgradeable } from "openzeppelin-contracts-upgradeable/contracts/token/ERC20/extensions/IERC20MetadataUpgradeable.sol";
import { TransparentUpgradeableProxy } from "@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol";
import { PoolLens } from "../PoolLens.sol";
import { AddressesProvider } from "../ionic/AddressesProvider.sol";
import { IonicUniV3Liquidator } from "../IonicUniV3Liquidator.sol";
import { ERC20 } from "solmate/tokens/ERC20.sol";

contract PermissionedLiquidationsMarketTest is MarketsTest {
  ICErc20 wethMarket;
  ICErc20 usdtMarket;
  IonicComptroller pool;
  PoolLens lens;
  address borrower;
  address liquidator;
  IonicUniV3Liquidator uniV3liquidator;

  function afterForkSetUp() internal virtual override {
    super.afterForkSetUp();

    wethMarket = ICErc20(0x71ef7EDa2Be775E5A7aa8afD02C45F059833e9d2);
    usdtMarket = ICErc20(0x94812F2eEa03A49869f95e1b5868C6f3206ee3D3);
    pool = IonicComptroller(0xFB3323E24743Caf4ADD0fDCCFB268565c0685556);
    lens = PoolLens(0x70BB19a56BfAEc65aE861E6275A90163AbDF36a6);
    ffd = FeeDistributor(payable(ap.getAddress("FeeDistributor")));
    borrower = 0xcE6cEFa163468F730206688665516952bcf83B74;
    liquidator = 0xE000008459b74a91e306a47C808061DFA372000E;
    uniV3liquidator = IonicUniV3Liquidator(payable(ap.getAddress("IonicUniV3Liquidator")));

    vm.prank(ap.owner());
    ap.setAddress("PoolLens", address(lens));
  }

  function testLiquidateNoThreshold() public debuggingOnly forkAtBlock(MODE_MAINNET, 10455052) {
    _upgradeMarket(wethMarket);
    _upgradeMarket(usdtMarket);

    vm.prank(usdtMarket.ionicAdmin());
    CTokenFirstExtension(address(usdtMarket))._setAddressesProvider(0xb0033576a9E444Dd801d5B69e1b63DBC459A6115);

    address targetContract = 0x927ae5509688eA6B992ba41Ecd1d49a6e7d69109;
    bytes
      memory data = hex"a9059cbb00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000003a000000000000000000000000000000000000000000000000000000000000002dd0b94812f2eea03a49869f95e1b5868c6f3206ee3d3002417bfdfbc000000000000000000000000ce6cefa163468f730206688665516952bcf83b740001000000000000000000000000000000000000000000000000000000006d3171ea02000000000000000000000000000000000000000000000000000000003698b8f5f0f161fda2712db8b566946122a5af183995e2ed02b702ce183b4e1faa574834715e5d4a6378d0eed3092be717340023c9e14c1bb12cb3ecbcfd3c3fb038000004a6afed9507f0f161fda2712db8b566946122a5af183995e2ed06000000000000000000000000000000000000000000000000000000003698b8f50109f0f161fda2712db8b566946122a5af183995e2ed000044095ea7b300000000000000000000000094812f2eea03a49869f95e1b5868c6f3206ee3d3000000000000000000000000000000000000000000000000000000000000000009f0f161fda2712db8b566946122a5af183995e2ed000044095ea7b300000000000000000000000094812f2eea03a49869f95e1b5868c6f3206ee3d3000000000000000000000000000000000000000000000000000000003698b8f50a94812f2eea03a49869f95e1b5868c6f3206ee3d3000024f5e3c462000000000000000000000000ce6cefa163468f730206688665516952bcf83b74002000000000000000000000000071ef7eda2be775e5a7aa8afd02c45f059833e9d20771ef7eda2be775e5a7aa8afd02c45f059833e9d20a71ef7eda2be775e5a7aa8afd02c45f059833e9d2000004db006a7500000742000000000000000000000000000000000000060100468cc91df6f669cae6cdce766995bd7874052fbc0000000000000000000000000000000000000000000000000000000000000000010107d988097fb8612cc24eec14542bc03424c656005f0100ee8291dd97611a064a7db0e8c9252d851674e20100000000000000000000000000000000000000000000000000000000000000000101000000000000000000000000000000000000000000000000000000000000000000009a07f0f161fda2712db8b566946122a5af183995e2ed0100a1c6800788482ba0eeb85f47322bb789986ee2f30000000000000000000000000000000000000000000000000000000000000000000107d988097fb8612cc24eec14542bc03424c656005f0100468cc91df6f669cae6cdce766995bd7874052fbc00000000000000000000000000000000000000000000000000000000000000000001000000000000";

    vm.startPrank(liquidator);
    (bool success, bytes memory returnData) = targetContract.call(data);
    require(success, "Transaction failed");
    vm.stopPrank();
  }

  function testLiquidateThresholdActive() public debuggingOnly forkAtBlock(MODE_MAINNET, 10455052) {
    vm.prank(uniV3liquidator.owner());
    uniV3liquidator.setHealthFactorThreshold(.98 * 1e18);

    _upgradeMarket(wethMarket);
    _upgradeMarket(usdtMarket);

    vm.prank(usdtMarket.ionicAdmin());
    CTokenFirstExtension(address(usdtMarket))._setAddressesProvider(0xb0033576a9E444Dd801d5B69e1b63DBC459A6115);

    address targetContract = 0x927ae5509688eA6B992ba41Ecd1d49a6e7d69109;
    bytes
      memory data = hex"a9059cbb00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000003a000000000000000000000000000000000000000000000000000000000000002dd0b94812f2eea03a49869f95e1b5868c6f3206ee3d3002417bfdfbc000000000000000000000000ce6cefa163468f730206688665516952bcf83b740001000000000000000000000000000000000000000000000000000000006d3171ea02000000000000000000000000000000000000000000000000000000003698b8f5f0f161fda2712db8b566946122a5af183995e2ed02b702ce183b4e1faa574834715e5d4a6378d0eed3092be717340023c9e14c1bb12cb3ecbcfd3c3fb038000004a6afed9507f0f161fda2712db8b566946122a5af183995e2ed06000000000000000000000000000000000000000000000000000000003698b8f50109f0f161fda2712db8b566946122a5af183995e2ed000044095ea7b300000000000000000000000094812f2eea03a49869f95e1b5868c6f3206ee3d3000000000000000000000000000000000000000000000000000000000000000009f0f161fda2712db8b566946122a5af183995e2ed000044095ea7b300000000000000000000000094812f2eea03a49869f95e1b5868c6f3206ee3d3000000000000000000000000000000000000000000000000000000003698b8f50a94812f2eea03a49869f95e1b5868c6f3206ee3d3000024f5e3c462000000000000000000000000ce6cefa163468f730206688665516952bcf83b74002000000000000000000000000071ef7eda2be775e5a7aa8afd02c45f059833e9d20771ef7eda2be775e5a7aa8afd02c45f059833e9d20a71ef7eda2be775e5a7aa8afd02c45f059833e9d2000004db006a7500000742000000000000000000000000000000000000060100468cc91df6f669cae6cdce766995bd7874052fbc0000000000000000000000000000000000000000000000000000000000000000010107d988097fb8612cc24eec14542bc03424c656005f0100ee8291dd97611a064a7db0e8c9252d851674e20100000000000000000000000000000000000000000000000000000000000000000101000000000000000000000000000000000000000000000000000000000000000000009a07f0f161fda2712db8b566946122a5af183995e2ed0100a1c6800788482ba0eeb85f47322bb789986ee2f30000000000000000000000000000000000000000000000000000000000000000000107d988097fb8612cc24eec14542bc03424c656005f0100468cc91df6f669cae6cdce766995bd7874052fbc00000000000000000000000000000000000000000000000000000000000000000001000000000000";

    vm.startPrank(liquidator);
    vm.expectRevert("Health factor not low enough for non-permissioned liquidations");
    (bool success, bytes memory returnData) = targetContract.call(data);
    vm.stopPrank();
  }

  function testLiquidateHealthFactorLowerThanThreshold() public debuggingOnly forkAtBlock(MODE_MAINNET, 10455052) {
    vm.prank(uniV3liquidator.owner());
    uniV3liquidator.setHealthFactorThreshold(.98 * 1e18);

    _upgradeMarket(wethMarket);
    _upgradeMarket(usdtMarket);

    vm.prank(usdtMarket.ionicAdmin());
    CTokenFirstExtension(address(usdtMarket))._setAddressesProvider(0xb0033576a9E444Dd801d5B69e1b63DBC459A6115);

    // fast forward until position unhealthy enough
    vm.roll(block.number + 10000000);

    address targetContract = 0x927ae5509688eA6B992ba41Ecd1d49a6e7d69109;
    bytes
      memory data = hex"a9059cbb00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000003a000000000000000000000000000000000000000000000000000000000000002dd0b94812f2eea03a49869f95e1b5868c6f3206ee3d3002417bfdfbc000000000000000000000000ce6cefa163468f730206688665516952bcf83b740001000000000000000000000000000000000000000000000000000000006d3171ea02000000000000000000000000000000000000000000000000000000003698b8f5f0f161fda2712db8b566946122a5af183995e2ed02b702ce183b4e1faa574834715e5d4a6378d0eed3092be717340023c9e14c1bb12cb3ecbcfd3c3fb038000004a6afed9507f0f161fda2712db8b566946122a5af183995e2ed06000000000000000000000000000000000000000000000000000000003698b8f50109f0f161fda2712db8b566946122a5af183995e2ed000044095ea7b300000000000000000000000094812f2eea03a49869f95e1b5868c6f3206ee3d3000000000000000000000000000000000000000000000000000000000000000009f0f161fda2712db8b566946122a5af183995e2ed000044095ea7b300000000000000000000000094812f2eea03a49869f95e1b5868c6f3206ee3d3000000000000000000000000000000000000000000000000000000003698b8f50a94812f2eea03a49869f95e1b5868c6f3206ee3d3000024f5e3c462000000000000000000000000ce6cefa163468f730206688665516952bcf83b74002000000000000000000000000071ef7eda2be775e5a7aa8afd02c45f059833e9d20771ef7eda2be775e5a7aa8afd02c45f059833e9d20a71ef7eda2be775e5a7aa8afd02c45f059833e9d2000004db006a7500000742000000000000000000000000000000000000060100468cc91df6f669cae6cdce766995bd7874052fbc0000000000000000000000000000000000000000000000000000000000000000010107d988097fb8612cc24eec14542bc03424c656005f0100ee8291dd97611a064a7db0e8c9252d851674e20100000000000000000000000000000000000000000000000000000000000000000101000000000000000000000000000000000000000000000000000000000000000000009a07f0f161fda2712db8b566946122a5af183995e2ed0100a1c6800788482ba0eeb85f47322bb789986ee2f30000000000000000000000000000000000000000000000000000000000000000000107d988097fb8612cc24eec14542bc03424c656005f0100468cc91df6f669cae6cdce766995bd7874052fbc00000000000000000000000000000000000000000000000000000000000000000001000000000000";

    vm.startPrank(liquidator);
    (bool success, bytes memory returnData) = targetContract.call(data);
    require(success, "Transaction failed");
    vm.stopPrank();
  }

  function testLiquidateFromPythShouldRevert() public debuggingOnly forkAtBlock(MODE_MAINNET, 10352583) {
    vm.prank(uniV3liquidator.owner());
    uniV3liquidator.setHealthFactorThreshold(.98 * 1e18);

    _upgradeMarket(wethMarket);
    _upgradeMarket(usdtMarket);

    vm.prank(wethMarket.ionicAdmin());
    CTokenFirstExtension(address(wethMarket))._setAddressesProvider(0xb0033576a9E444Dd801d5B69e1b63DBC459A6115);

    emit log_named_uint("hf", lens.getHealthFactor(0x0Ff7F5043DD39186c2DF04F81cfa95672B8A3994, pool));

    address targetContract = 0xa12c1E460c06B1745EFcbfC9A1f666a8749B0e3A;
    bytes
      memory data = hex"55e9e8fe00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000ff7f5043dd39186c2df04f81cfa95672b8a39940000000000000000000000000000000000000000000000000002fb8c3841c79600000000000000000000000071ef7eda2be775e5a7aa8afd02c45f059833e9d200000000000000000000000071ef7eda2be775e5a7aa8afd02c45f059833e9d2000000000000000000000000468cc91df6f669cae6cdce766995bd7874052fbc000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001400000000000000000000000000000000000000000000000000000000000000160000000000000000000000000000000000000000000000000000000000000018000000000000000000000000000000000000000000000000000000000000001a00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";

    vm.startPrank(0x1110DECC92083fbcae218a8478F75B2Ad1b9AEe6);
    vm.expectRevert("invalid liquidation");
    (bool success, bytes memory returnData) = targetContract.call(data);
    require(success, "Transaction failed");
    vm.stopPrank();
  }

  function testLiquidateFromPyth() public debuggingOnly forkAtBlock(MODE_MAINNET, 10352583) {
    vm.prank(uniV3liquidator.owner());
    uniV3liquidator.setHealthFactorThreshold(.98 * 1e18);

    _upgradeMarket(wethMarket);
    _upgradeMarket(usdtMarket);

    vm.prank(wethMarket.ionicAdmin());
    CTokenFirstExtension(address(wethMarket))._setAddressesProvider(0xb0033576a9E444Dd801d5B69e1b63DBC459A6115);

    emit log_named_uint("hf", lens.getHealthFactor(0x0Ff7F5043DD39186c2DF04F81cfa95672B8A3994, pool));

    address targetContract = 0xa12c1E460c06B1745EFcbfC9A1f666a8749B0e3A;
    bytes
      memory data = hex"55e9e8fe00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000ff7f5043dd39186c2df04f81cfa95672b8a39940000000000000000000000000000000000000000000000000002fb8c3841c79600000000000000000000000071ef7eda2be775e5a7aa8afd02c45f059833e9d200000000000000000000000071ef7eda2be775e5a7aa8afd02c45f059833e9d2000000000000000000000000468cc91df6f669cae6cdce766995bd7874052fbc000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001400000000000000000000000000000000000000000000000000000000000000160000000000000000000000000000000000000000000000000000000000000018000000000000000000000000000000000000000000000000000000000000001a00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";

    vm.mockCall(
      address(uniV3liquidator.expressRelay()),
      abi.encodeWithSelector(
        bytes4(keccak256("isPermissioned(address,bytes)")),
        address(uniV3liquidator),
        abi.encode(0x1110DECC92083fbcae218a8478F75B2Ad1b9AEe6)
      ),
      abi.encode(false)
    );

    vm.startPrank(0x1110DECC92083fbcae218a8478F75B2Ad1b9AEe6);
    vm.expectRevert("invalid liquidation");
    (bool success, bytes memory returnData) = targetContract.call(data);
    require(success, "Transaction failed");
    vm.stopPrank();
  }
}

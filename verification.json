{
  "language": "Solidity",
  "sources": {
    "contracts/ionic/levered/LeveredPosition.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity ^0.8.10;\n\nimport { IonicComptroller } from \"../../compound/ComptrollerInterface.sol\";\nimport { ICErc20 } from \"../../compound/CTokenInterfaces.sol\";\nimport { BasePriceOracle } from \"../../oracles/BasePriceOracle.sol\";\nimport { IFundsConversionStrategy } from \"../../liquidators/IFundsConversionStrategy.sol\";\nimport { IRedemptionStrategy } from \"../../liquidators/IRedemptionStrategy.sol\";\nimport { ILeveredPositionFactory } from \"./ILeveredPositionFactory.sol\";\nimport { IFlashLoanReceiver } from \"../IFlashLoanReceiver.sol\";\nimport { IonicFlywheel } from \"../../ionic/strategies/flywheel/IonicFlywheel.sol\";\nimport { ERC20 } from \"solmate/tokens/ERC20.sol\";\nimport { LeveredPositionStorage } from \"./LeveredPositionStorage.sol\";\n\nimport \"openzeppelin-contracts-upgradeable/contracts/token/ERC20/utils/SafeERC20Upgradeable.sol\";\nimport \"openzeppelin-contracts-upgradeable/contracts/token/ERC20/IERC20Upgradeable.sol\";\n\ncontract LeveredPosition is LeveredPositionStorage, IFlashLoanReceiver {\n  using SafeERC20Upgradeable for IERC20Upgradeable;\n\n  error OnlyWhenClosed();\n  error NotPositionOwner();\n  error RepayFlashLoanFailed(address asset, uint256 currentBalance, uint256 repayAmount);\n\n  error ConvertFundsFailed();\n  error ExitFailed(uint256 errorCode);\n  error RedeemFailed(uint256 errorCode);\n  error SupplyCollateralFailed(uint256 errorCode);\n  error BorrowStableFailed(uint256 errorCode);\n  error RepayBorrowFailed(uint256 errorCode);\n  error RedeemCollateralFailed(uint256 errorCode);\n  error ExtNotFound(bytes4 _functionSelector);\n\n  constructor(\n    address _positionOwner,\n    ICErc20 _collateralMarket,\n    ICErc20 _stableMarket\n  ) LeveredPositionStorage(_positionOwner) {\n    IonicComptroller collateralPool = _collateralMarket.comptroller();\n    IonicComptroller stablePool = _stableMarket.comptroller();\n    require(collateralPool == stablePool, \"markets pools differ\");\n    pool = collateralPool;\n\n    collateralMarket = _collateralMarket;\n    collateralAsset = IERC20Upgradeable(_collateralMarket.underlying());\n    stableMarket = _stableMarket;\n    stableAsset = IERC20Upgradeable(_stableMarket.underlying());\n\n    factory = ILeveredPositionFactory(msg.sender);\n  }\n\n  /*----------------------------------------------------------------\n                          Mutable Functions\n  ----------------------------------------------------------------*/\n\n  function fundPosition(IERC20Upgradeable fundingAsset, uint256 amount) public {\n    fundingAsset.safeTransferFrom(msg.sender, address(this), amount);\n    _supplyCollateral(fundingAsset);\n\n    if (!pool.checkMembership(address(this), collateralMarket)) {\n      address[] memory cTokens = new address[](1);\n      cTokens[0] = address(collateralMarket);\n      pool.enterMarkets(cTokens);\n    }\n  }\n\n  function closePosition() public returns (uint256) {\n    return closePosition(msg.sender);\n  }\n\n  function closePosition(address withdrawTo) public returns (uint256 withdrawAmount) {\n    if (msg.sender != positionOwner && msg.sender != address(factory)) revert NotPositionOwner();\n\n    _leverDown(1e18);\n\n    // calling accrue and exit allows to redeem the full underlying balance\n    collateralMarket.accrueInterest();\n    uint256 errorCode = pool.exitMarket(address(collateralMarket));\n    if (errorCode != 0) revert ExitFailed(errorCode);\n\n    // redeem all cTokens should leave no dust\n    errorCode = collateralMarket.redeem(collateralMarket.balanceOf(address(this)));\n    if (errorCode != 0) revert RedeemFailed(errorCode);\n\n    if (stableAsset.balanceOf(address(this)) > 0) {\n      // convert all overborrowed leftovers/profits to the collateral asset\n      convertAllTo(stableAsset, collateralAsset);\n    }\n\n    // withdraw the redeemed collateral\n    withdrawAmount = collateralAsset.balanceOf(address(this));\n    collateralAsset.safeTransfer(withdrawTo, withdrawAmount);\n  }\n\n  function adjustLeverageRatio(uint256 targetRatioMantissa) public returns (uint256) {\n    if (msg.sender != positionOwner && msg.sender != address(factory)) revert NotPositionOwner();\n\n    // anything under 1x means removing the leverage\n    if (targetRatioMantissa <= 1e18) _leverDown(1e18);\n\n    if (getCurrentLeverageRatio() < targetRatioMantissa) _leverUp(targetRatioMantissa);\n    else _leverDown(targetRatioMantissa);\n\n    // return the de facto achieved ratio\n    return getCurrentLeverageRatio();\n  }\n\n  function receiveFlashLoan(\n    address assetAddress,\n    uint256 borrowedAmount,\n    bytes calldata data\n  ) external override {\n    if (msg.sender == address(collateralMarket)) {\n      // increasing the leverage ratio\n      uint256 stableBorrowAmount = abi.decode(data, (uint256));\n      _leverUpPostFL(stableBorrowAmount);\n      uint256 positionCollateralBalance = collateralAsset.balanceOf(address(this));\n      if (positionCollateralBalance < borrowedAmount)\n        revert RepayFlashLoanFailed(address(collateralAsset), positionCollateralBalance, borrowedAmount);\n    } else if (msg.sender == address(stableMarket)) {\n      // decreasing the leverage ratio\n      uint256 amountToRedeem = abi.decode(data, (uint256));\n      _leverDownPostFL(borrowedAmount, amountToRedeem);\n      uint256 positionStableBalance = stableAsset.balanceOf(address(this));\n      if (positionStableBalance < borrowedAmount)\n        revert RepayFlashLoanFailed(address(stableAsset), positionStableBalance, borrowedAmount);\n    } else {\n      revert(\"!fl not from either markets\");\n    }\n\n    // repay FL\n    IERC20Upgradeable(assetAddress).approve(msg.sender, borrowedAmount);\n  }\n\n  function withdrawStableLeftovers(address withdrawTo) public returns (uint256) {\n    if (msg.sender != positionOwner) revert NotPositionOwner();\n    if (!isPositionClosed()) revert OnlyWhenClosed();\n\n    uint256 stableLeftovers = stableAsset.balanceOf(address(this));\n    stableAsset.safeTransfer(withdrawTo, stableLeftovers);\n    return stableLeftovers;\n  }\n\n  function claimRewards() public {\n    claimRewards(msg.sender);\n  }\n\n  function claimRewards(address withdrawTo) public {\n    if (msg.sender != positionOwner && msg.sender != address(factory)) revert NotPositionOwner();\n\n    address[] memory flywheels = pool.getRewardsDistributors();\n\n    for (uint256 i = 0; i < flywheels.length; i++) {\n      IonicFlywheel fw = IonicFlywheel(flywheels[i]);\n      fw.accrue(ERC20(address(collateralMarket)), address(this));\n      fw.accrue(ERC20(address(stableMarket)), address(this));\n      fw.claimRewards(address(this));\n      ERC20 rewardToken = fw.rewardToken();\n      uint256 rewardsAccrued = rewardToken.balanceOf(address(this));\n      if (rewardsAccrued > 0) {\n        rewardToken.transfer(withdrawTo, rewardsAccrued);\n      }\n    }\n  }\n\n  fallback() external {\n    address extension = factory.getPositionsExtension(msg.sig);\n    if (extension == address(0)) revert ExtNotFound(msg.sig);\n    // Execute external function from extension using delegatecall and return any value.\n    assembly {\n      // copy function selector and any arguments\n      calldatacopy(0, 0, calldatasize())\n      // execute function call using the extension\n      let result := delegatecall(gas(), extension, 0, calldatasize(), 0, 0)\n      // get any return value\n      returndatacopy(0, 0, returndatasize())\n      // return any return value or error back to the caller\n      switch result\n      case 0 {\n        revert(0, returndatasize())\n      }\n      default {\n        return(0, returndatasize())\n      }\n    }\n  }\n\n  /*----------------------------------------------------------------\n                          View Functions\n  ----------------------------------------------------------------*/\n\n  /// @notice this is a lens fn, it is not intended to be used on-chain\n  function getAccruedRewards()\n    external\n    returns (\n      /*view*/\n      ERC20[] memory rewardTokens,\n      uint256[] memory amounts\n    )\n  {\n    address[] memory flywheels = pool.getRewardsDistributors();\n\n    rewardTokens = new ERC20[](flywheels.length);\n    amounts = new uint256[](flywheels.length);\n\n    for (uint256 i = 0; i < flywheels.length; i++) {\n      IonicFlywheel fw = IonicFlywheel(flywheels[i]);\n      fw.accrue(ERC20(address(collateralMarket)), address(this));\n      fw.accrue(ERC20(address(stableMarket)), address(this));\n      rewardTokens[i] = fw.rewardToken();\n      amounts[i] = fw.rewardsAccrued(address(this));\n    }\n  }\n\n  function getCurrentLeverageRatio() public view returns (uint256) {\n    uint256 positionSupplyAmount = collateralMarket.balanceOfUnderlying(address(this));\n    if (positionSupplyAmount == 0) return 0;\n\n    BasePriceOracle oracle = pool.oracle();\n\n    uint256 collateralAssetPrice = oracle.getUnderlyingPrice(collateralMarket);\n    uint256 positionValue = (collateralAssetPrice * positionSupplyAmount) / 1e18;\n\n    uint256 debtValue = 0;\n    uint256 debtAmount = stableMarket.borrowBalanceCurrent(address(this));\n    if (debtAmount > 0) {\n      uint256 borrowedAssetPrice = oracle.getUnderlyingPrice(stableMarket);\n      debtValue = (borrowedAssetPrice * debtAmount) / 1e18;\n    }\n\n    // TODO check if positionValue > debtValue\n    // s / ( s - b )\n    return (positionValue * 1e18) / (positionValue - debtValue);\n  }\n\n  function getMinLeverageRatio() public view returns (uint256) {\n    uint256 positionSupplyAmount = collateralMarket.balanceOfUnderlying(address(this));\n    if (positionSupplyAmount == 0) return 0;\n\n    BasePriceOracle oracle = pool.oracle();\n    uint256 borrowedAssetPrice = oracle.getUnderlyingPrice(stableMarket);\n    uint256 minStableBorrowAmount = (factory.getMinBorrowNative() * 1e18) / borrowedAssetPrice;\n    return _getLeverageRatioAfterBorrow(minStableBorrowAmount, positionSupplyAmount, 0);\n  }\n\n  function getMaxLeverageRatio() public view returns (uint256) {\n    uint256 positionSupplyAmount = collateralMarket.balanceOfUnderlying(address(this));\n    if (positionSupplyAmount == 0) return 0;\n\n    uint256 maxBorrow = pool.getMaxRedeemOrBorrow(address(this), stableMarket, true);\n    uint256 positionBorrowAmount = stableMarket.borrowBalanceCurrent(address(this));\n    return _getLeverageRatioAfterBorrow(maxBorrow, positionSupplyAmount, positionBorrowAmount);\n  }\n\n  function _getLeverageRatioAfterBorrow(\n    uint256 newBorrowsAmount,\n    uint256 positionSupplyAmount,\n    uint256 positionBorrowAmount\n  ) internal view returns (uint256 r) {\n    BasePriceOracle oracle = pool.oracle();\n    uint256 stableAssetPrice = oracle.getUnderlyingPrice(stableMarket);\n    uint256 collateralAssetPrice = oracle.getUnderlyingPrice(collateralMarket);\n\n    uint256 currentBorrowsValue = (positionBorrowAmount * stableAssetPrice) / 1e18;\n    uint256 newBorrowsValue = (newBorrowsAmount * stableAssetPrice) / 1e18;\n    uint256 positionValue = (positionSupplyAmount * collateralAssetPrice) / 1e18;\n\n    // accounting for swaps slippage\n    uint256 assumedSlippage = factory.liquidatorsRegistry().getSlippage(stableAsset, collateralAsset);\n    {\n      // add 10 bps just to not go under the min borrow value\n      assumedSlippage += 10;\n    }\n    uint256 topUpCollateralValue = (newBorrowsValue * 10000) / (10000 + assumedSlippage);\n\n    int256 s = int256(positionValue);\n    int256 b = int256(currentBorrowsValue);\n    int256 x = int256(topUpCollateralValue);\n\n    r = uint256(((s + x) * 1e18) / (s + x - b - int256(newBorrowsValue)));\n  }\n\n  function isPositionClosed() public view returns (bool) {\n    return collateralMarket.balanceOfUnderlying(address(this)) == 0;\n  }\n\n  function getEquityAmount() external view returns (uint256 equityAmount) {\n    BasePriceOracle oracle = pool.oracle();\n    uint256 borrowedAssetPrice = oracle.getUnderlyingPrice(stableMarket);\n    uint256 collateralAssetPrice = oracle.getUnderlyingPrice(collateralMarket);\n    uint256 positionSupplyAmount = collateralMarket.balanceOfUnderlying(address(this));\n    uint256 positionValue = (collateralAssetPrice * positionSupplyAmount) / 1e18;\n\n    uint256 debtAmount = stableMarket.borrowBalanceCurrent(address(this));\n    uint256 debtValue = (borrowedAssetPrice * debtAmount) / 1e18;\n\n    uint256 equityValue = positionValue - debtValue;\n    equityAmount = (equityValue * 1e18) / collateralAssetPrice;\n  }\n\n  function getSupplyAmountDelta(uint256 targetRatio) public view returns (uint256, uint256) {\n    BasePriceOracle oracle = pool.oracle();\n    uint256 stableAssetPrice = oracle.getUnderlyingPrice(stableMarket);\n    uint256 collateralAssetPrice = oracle.getUnderlyingPrice(collateralMarket);\n\n    uint256 currentRatio = getCurrentLeverageRatio();\n    bool up = targetRatio > currentRatio;\n    return _getSupplyAmountDelta(up, targetRatio, collateralAssetPrice, stableAssetPrice);\n  }\n\n  function _getSupplyAmountDelta(\n    bool up,\n    uint256 targetRatio,\n    uint256 collateralAssetPrice,\n    uint256 borrowedAssetPrice\n  ) internal view returns (uint256 supplyDelta, uint256 borrowsDelta) {\n    uint256 positionSupplyAmount = collateralMarket.balanceOfUnderlying(address(this));\n    uint256 debtAmount = stableMarket.borrowBalanceCurrent(address(this));\n    uint256 assumedSlippage;\n    if (up) assumedSlippage = factory.liquidatorsRegistry().getSlippage(stableAsset, collateralAsset);\n    else assumedSlippage = factory.liquidatorsRegistry().getSlippage(collateralAsset, stableAsset);\n    uint256 slippageFactor = (1e18 * (10000 + assumedSlippage)) / 10000;\n\n    uint256 supplyValueDeltaAbs;\n    {\n      // s = supply value before\n      // b = borrow value before\n      // r = target ratio after\n      // c = borrow value coefficient to account for the slippage\n      int256 s = int256((collateralAssetPrice * positionSupplyAmount) / 1e18);\n      int256 b = int256((borrowedAssetPrice * debtAmount) / 1e18);\n      int256 r = int256(targetRatio);\n      int256 r1 = r - 1e18;\n      int256 c = int256(slippageFactor);\n\n      // some math magic here\n      // https://www.wolframalpha.com/input?i2d=true&i=r%3D%5C%2840%29Divide%5B%5C%2840%29s%2Bx%5C%2841%29%2C%5C%2840%29s%2Bx-b-c*x%5C%2841%29%5D+%5C%2841%29+solve+for+x\n\n      // x = supplyValueDelta\n      int256 supplyValueDelta = (((r1 * s) - (b * r)) * 1e18) / ((c * r) - (1e18 * r1));\n      supplyValueDeltaAbs = uint256((supplyValueDelta < 0) ? -supplyValueDelta : supplyValueDelta);\n    }\n\n    supplyDelta = (supplyValueDeltaAbs * 1e18) / collateralAssetPrice;\n    borrowsDelta = (supplyValueDeltaAbs * 1e18) / borrowedAssetPrice;\n\n    if (up) {\n      // stables to borrow = c * x\n      borrowsDelta = (borrowsDelta * slippageFactor) / 1e18;\n    } else {\n      // amount to redeem = c * x\n      supplyDelta = (supplyDelta * slippageFactor) / 1e18;\n    }\n  }\n\n  /*----------------------------------------------------------------\n                            Internal Functions\n  ----------------------------------------------------------------*/\n\n  function _supplyCollateral(IERC20Upgradeable fundingAsset) internal returns (uint256 amountToSupply) {\n    // in case the funding is with a different asset\n    if (address(collateralAsset) != address(fundingAsset)) {\n      // swap for collateral asset\n      convertAllTo(fundingAsset, collateralAsset);\n    }\n\n    // supply the collateral\n    amountToSupply = collateralAsset.balanceOf(address(this));\n    collateralAsset.approve(address(collateralMarket), amountToSupply);\n    uint256 errorCode = collateralMarket.mint(amountToSupply);\n    if (errorCode != 0) revert SupplyCollateralFailed(errorCode);\n  }\n\n  // @dev flash loan the needed amount, then borrow stables and swap them for the amount needed to repay the FL\n  function _leverUp(uint256 targetRatio) internal {\n    BasePriceOracle oracle = pool.oracle();\n    uint256 stableAssetPrice = oracle.getUnderlyingPrice(stableMarket);\n    uint256 collateralAssetPrice = oracle.getUnderlyingPrice(collateralMarket);\n\n    (uint256 flashLoanCollateralAmount, uint256 stableToBorrow) = _getSupplyAmountDelta(\n      true,\n      targetRatio,\n      collateralAssetPrice,\n      stableAssetPrice\n    );\n\n    collateralMarket.flash(flashLoanCollateralAmount, abi.encode(stableToBorrow));\n    // the execution will first receive a callback to receiveFlashLoan()\n    // then it continues from here\n\n    // all stables are swapped for collateral to repay the FL\n    uint256 collateralLeftovers = collateralAsset.balanceOf(address(this));\n    if (collateralLeftovers > 0) {\n      collateralAsset.approve(address(collateralMarket), collateralLeftovers);\n      collateralMarket.mint(collateralLeftovers);\n    }\n  }\n\n  // @dev supply the flash loaned collateral and then borrow stables with it\n  function _leverUpPostFL(uint256 stableToBorrow) internal {\n    // supply the flash loaned collateral\n    _supplyCollateral(collateralAsset);\n\n    // borrow stables that will be swapped to repay the FL\n    uint256 errorCode = stableMarket.borrow(stableToBorrow);\n    if (errorCode != 0) revert BorrowStableFailed(errorCode);\n\n    // swap for the FL asset\n    convertAllTo(stableAsset, collateralAsset);\n  }\n\n  // @dev redeems the supplied collateral by first repaying the debt with which it was levered\n  function _leverDown(uint256 targetRatio) internal {\n    uint256 amountToRedeem;\n    uint256 borrowsToRepay;\n\n    BasePriceOracle oracle = pool.oracle();\n    uint256 stableAssetPrice = oracle.getUnderlyingPrice(stableMarket);\n    uint256 collateralAssetPrice = oracle.getUnderlyingPrice(collateralMarket);\n\n    if (targetRatio <= 1e18) {\n      // if max levering down, then derive the amount to redeem from the debt to be repaid\n      borrowsToRepay = stableMarket.borrowBalanceCurrent(address(this));\n      uint256 borrowsToRepayValueScaled = borrowsToRepay * stableAssetPrice;\n      // accounting for swaps slippage\n      uint256 assumedSlippage = factory.liquidatorsRegistry().getSlippage(collateralAsset, stableAsset);\n      uint256 amountToRedeemValueScaled = (borrowsToRepayValueScaled * (10000 + assumedSlippage)) / 10000;\n      amountToRedeem = amountToRedeemValueScaled / collateralAssetPrice;\n    } else {\n      // else derive the debt to be repaid from the amount to redeem\n      (amountToRedeem, borrowsToRepay) = _getSupplyAmountDelta(\n        false,\n        targetRatio,\n        collateralAssetPrice,\n        stableAssetPrice\n      );\n      // the slippage is already accounted for in _getSupplyAmountDelta\n    }\n\n    if (borrowsToRepay > 0) {\n      ICErc20(address(stableMarket)).flash(borrowsToRepay, abi.encode(amountToRedeem));\n      // the execution will first receive a callback to receiveFlashLoan()\n      // then it continues from here\n    }\n\n    // all the redeemed collateral is swapped for stables to repay the FL\n    uint256 stableLeftovers = stableAsset.balanceOf(address(this));\n    if (stableLeftovers > 0) {\n      uint256 borrowBalance = stableMarket.borrowBalanceCurrent(address(this));\n      if (borrowBalance > 0) {\n        // whatever is smaller\n        uint256 amountToRepay = borrowBalance > stableLeftovers ? stableLeftovers : borrowBalance;\n        stableAsset.approve(address(stableMarket), amountToRepay);\n        stableMarket.repayBorrow(amountToRepay);\n      }\n    }\n  }\n\n  function _leverDownPostFL(uint256 _flashLoanedCollateral, uint256 _amountToRedeem) internal {\n    // repay the borrows\n    uint256 borrowBalance = stableMarket.borrowBalanceCurrent(address(this));\n    uint256 repayAmount = _flashLoanedCollateral < borrowBalance ? _flashLoanedCollateral : borrowBalance;\n    stableAsset.approve(address(stableMarket), repayAmount);\n    uint256 errorCode = stableMarket.repayBorrow(repayAmount);\n    if (errorCode != 0) revert RepayBorrowFailed(errorCode);\n\n    // redeem the corresponding amount needed to repay the FL\n    errorCode = collateralMarket.redeemUnderlying(_amountToRedeem);\n    if (errorCode != 0) revert RedeemCollateralFailed(errorCode);\n\n    // swap for the FL asset\n    convertAllTo(collateralAsset, stableAsset);\n  }\n\n  function convertAllTo(IERC20Upgradeable inputToken, IERC20Upgradeable outputToken)\n    private\n    returns (uint256 outputAmount)\n  {\n    uint256 inputAmount = inputToken.balanceOf(address(this));\n    (IRedemptionStrategy[] memory redemptionStrategies, bytes[] memory strategiesData) = factory\n      .getRedemptionStrategies(inputToken, outputToken);\n\n    if (redemptionStrategies.length == 0) revert ConvertFundsFailed();\n\n    for (uint256 i = 0; i < redemptionStrategies.length; i++) {\n      IRedemptionStrategy redemptionStrategy = redemptionStrategies[i];\n      bytes memory strategyData = strategiesData[i];\n      (outputToken, outputAmount) = convertCustomFunds(inputToken, inputAmount, redemptionStrategy, strategyData);\n      inputAmount = outputAmount;\n      inputToken = outputToken;\n    }\n  }\n\n  function convertCustomFunds(\n    IERC20Upgradeable inputToken,\n    uint256 inputAmount,\n    IRedemptionStrategy strategy,\n    bytes memory strategyData\n  ) private returns (IERC20Upgradeable, uint256) {\n    bytes memory returndata = _functionDelegateCall(\n      address(strategy),\n      abi.encodeWithSelector(strategy.redeem.selector, inputToken, inputAmount, strategyData)\n    );\n    return abi.decode(returndata, (IERC20Upgradeable, uint256));\n  }\n\n  function _functionDelegateCall(address target, bytes memory data) private returns (bytes memory) {\n    require(AddressUpgradeable.isContract(target), \"Address: delegate call to non-contract\");\n    (bool success, bytes memory returndata) = target.delegatecall(data);\n    return _verifyCallResult(success, returndata, \"Address: low-level delegate call failed\");\n  }\n\n  function _verifyCallResult(\n    bool success,\n    bytes memory returndata,\n    string memory errorMessage\n  ) private pure returns (bytes memory) {\n    if (success) {\n      return returndata;\n    } else {\n      if (returndata.length > 0) {\n        assembly {\n          let returndata_size := mload(returndata)\n          revert(add(32, returndata), returndata_size)\n        }\n      } else {\n        revert(errorMessage);\n      }\n    }\n  }\n}\n"
    },
    "contracts/compound/ComptrollerInterface.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity >=0.8.0;\n\nimport { BasePriceOracle } from \"../oracles/BasePriceOracle.sol\";\nimport { ICErc20 } from \"./CTokenInterfaces.sol\";\nimport { ComptrollerV3Storage } from \"../compound/ComptrollerStorage.sol\";\n\ninterface ComptrollerInterface {\n  function isDeprecated(ICErc20 cToken) external view returns (bool);\n\n  function _becomeImplementation() external;\n\n  function _deployMarket(\n    uint8 delegateType,\n    bytes memory constructorData,\n    bytes calldata becomeImplData,\n    uint256 collateralFactorMantissa\n  ) external returns (uint256);\n\n  function getAssetsIn(address account) external view returns (ICErc20[] memory);\n\n  function checkMembership(address account, ICErc20 cToken) external view returns (bool);\n\n  function _setPriceOracle(BasePriceOracle newOracle) external returns (uint256);\n\n  function _setCloseFactor(uint256 newCloseFactorMantissa) external returns (uint256);\n\n  function _setCollateralFactor(ICErc20 market, uint256 newCollateralFactorMantissa) external returns (uint256);\n\n  function _setLiquidationIncentive(uint256 newLiquidationIncentiveMantissa) external returns (uint256);\n\n  function _setWhitelistEnforcement(bool enforce) external returns (uint256);\n\n  function _setWhitelistStatuses(address[] calldata _suppliers, bool[] calldata statuses) external returns (uint256);\n\n  function _addRewardsDistributor(address distributor) external returns (uint256);\n\n  function getHypotheticalAccountLiquidity(\n    address account,\n    address cTokenModify,\n    uint256 redeemTokens,\n    uint256 borrowAmount,\n    uint256 repayAmount\n  )\n    external\n    view\n    returns (\n      uint256,\n      uint256,\n      uint256,\n      uint256\n    );\n\n  function getMaxRedeemOrBorrow(\n    address account,\n    ICErc20 cToken,\n    bool isBorrow\n  ) external view returns (uint256);\n\n  /*** Assets You Are In ***/\n\n  function enterMarkets(address[] calldata cTokens) external returns (uint256[] memory);\n\n  function exitMarket(address cToken) external returns (uint256);\n\n  /*** Policy Hooks ***/\n\n  function mintAllowed(\n    address cToken,\n    address minter,\n    uint256 mintAmount\n  ) external returns (uint256);\n\n  function redeemAllowed(\n    address cToken,\n    address redeemer,\n    uint256 redeemTokens\n  ) external returns (uint256);\n\n  function redeemVerify(\n    address cToken,\n    address redeemer,\n    uint256 redeemAmount,\n    uint256 redeemTokens\n  ) external;\n\n  function borrowAllowed(\n    address cToken,\n    address borrower,\n    uint256 borrowAmount\n  ) external returns (uint256);\n\n  function borrowWithinLimits(address cToken, uint256 accountBorrowsNew) external view returns (uint256);\n\n  function repayBorrowAllowed(\n    address cToken,\n    address payer,\n    address borrower,\n    uint256 repayAmount\n  ) external returns (uint256);\n\n  function liquidateBorrowAllowed(\n    address cTokenBorrowed,\n    address cTokenCollateral,\n    address liquidator,\n    address borrower,\n    uint256 repayAmount\n  ) external returns (uint256);\n\n  function seizeAllowed(\n    address cTokenCollateral,\n    address cTokenBorrowed,\n    address liquidator,\n    address borrower,\n    uint256 seizeTokens\n  ) external returns (uint256);\n\n  function transferAllowed(\n    address cToken,\n    address src,\n    address dst,\n    uint256 transferTokens\n  ) external returns (uint256);\n\n  function mintVerify(\n    address cToken,\n    address minter,\n    uint256 actualMintAmount,\n    uint256 mintTokens\n  ) external;\n\n  /*** Liquidity/Liquidation Calculations ***/\n\n  function getAccountLiquidity(address account)\n    external\n    view\n    returns (\n      uint256 error,\n      uint256 collateralValue,\n      uint256 liquidity,\n      uint256 shortfall\n    );\n\n  function liquidateCalculateSeizeTokens(\n    address cTokenBorrowed,\n    address cTokenCollateral,\n    uint256 repayAmount\n  ) external view returns (uint256, uint256);\n\n  /*** Pool-Wide/Cross-Asset Reentrancy Prevention ***/\n\n  function _beforeNonReentrant() external;\n\n  function _afterNonReentrant() external;\n}\n\ninterface ComptrollerStorageInterface {\n  function admin() external view returns (address);\n\n  function adminHasRights() external view returns (bool);\n\n  function ionicAdmin() external view returns (address);\n\n  function ionicAdminHasRights() external view returns (bool);\n\n  function pendingAdmin() external view returns (address);\n\n  function oracle() external view returns (BasePriceOracle);\n\n  function pauseGuardian() external view returns (address);\n\n  function closeFactorMantissa() external view returns (uint256);\n\n  function liquidationIncentiveMantissa() external view returns (uint256);\n\n  function isUserOfPool(address user) external view returns (bool);\n\n  function whitelist(address account) external view returns (bool);\n\n  function enforceWhitelist() external view returns (bool);\n\n  function borrowCapForCollateral(address borrowed, address collateral) external view returns (uint256);\n\n  function borrowingAgainstCollateralBlacklist(address borrowed, address collateral) external view returns (bool);\n\n  function suppliers(address account) external view returns (bool);\n\n  function cTokensByUnderlying(address) external view returns (address);\n\n  function supplyCaps(address cToken) external view returns (uint256);\n\n  function borrowCaps(address cToken) external view returns (uint256);\n\n  function markets(address cToken) external view returns (bool, uint256);\n\n  function accountAssets(address, uint256) external view returns (address);\n\n  function borrowGuardianPaused(address cToken) external view returns (bool);\n\n  function mintGuardianPaused(address cToken) external view returns (bool);\n\n  function rewardsDistributors(uint256) external view returns (address);\n}\n\ninterface SFSRegister {\n  function register(address _recipient) external returns (uint256 tokenId);\n}\n\ninterface ComptrollerExtensionInterface {\n  function getWhitelistedSuppliersSupply(address cToken) external view returns (uint256 supplied);\n\n  function getWhitelistedBorrowersBorrows(address cToken) external view returns (uint256 borrowed);\n\n  function getAllMarkets() external view returns (ICErc20[] memory);\n\n  function getAllBorrowers() external view returns (address[] memory);\n\n  function getAllBorrowersCount() external view returns (uint256);\n\n  function getPaginatedBorrowers(uint256 page, uint256 pageSize)\n    external\n    view\n    returns (uint256 _totalPages, address[] memory _pageOfBorrowers);\n\n  function getRewardsDistributors() external view returns (address[] memory);\n\n  function getAccruingFlywheels() external view returns (address[] memory);\n\n  function _supplyCapWhitelist(\n    address cToken,\n    address account,\n    bool whitelisted\n  ) external;\n\n  function _setBorrowCapForCollateral(\n    address cTokenBorrow,\n    address cTokenCollateral,\n    uint256 borrowCap\n  ) external;\n\n  function _setBorrowCapForCollateralWhitelist(\n    address cTokenBorrow,\n    address cTokenCollateral,\n    address account,\n    bool whitelisted\n  ) external;\n\n  function isBorrowCapForCollateralWhitelisted(\n    address cTokenBorrow,\n    address cTokenCollateral,\n    address account\n  ) external view returns (bool);\n\n  function _blacklistBorrowingAgainstCollateral(\n    address cTokenBorrow,\n    address cTokenCollateral,\n    bool blacklisted\n  ) external;\n\n  function _blacklistBorrowingAgainstCollateralWhitelist(\n    address cTokenBorrow,\n    address cTokenCollateral,\n    address account,\n    bool whitelisted\n  ) external;\n\n  function isBlacklistBorrowingAgainstCollateralWhitelisted(\n    address cTokenBorrow,\n    address cTokenCollateral,\n    address account\n  ) external view returns (bool);\n\n  function isSupplyCapWhitelisted(address cToken, address account) external view returns (bool);\n\n  function _borrowCapWhitelist(\n    address cToken,\n    address account,\n    bool whitelisted\n  ) external;\n\n  function isBorrowCapWhitelisted(address cToken, address account) external view returns (bool);\n\n  function _removeFlywheel(address flywheelAddress) external returns (bool);\n\n  function getWhitelist() external view returns (address[] memory);\n\n  function addNonAccruingFlywheel(address flywheelAddress) external returns (bool);\n\n  function _setMarketSupplyCaps(ICErc20[] calldata cTokens, uint256[] calldata newSupplyCaps) external;\n\n  function _setMarketBorrowCaps(ICErc20[] calldata cTokens, uint256[] calldata newBorrowCaps) external;\n\n  function _setBorrowCapGuardian(address newBorrowCapGuardian) external;\n\n  function _setPauseGuardian(address newPauseGuardian) external returns (uint256);\n\n  function _setMintPaused(ICErc20 cToken, bool state) external returns (bool);\n\n  function _setBorrowPaused(ICErc20 cToken, bool state) external returns (bool);\n\n  function _setTransferPaused(bool state) external returns (bool);\n\n  function _setSeizePaused(bool state) external returns (bool);\n\n  function _unsupportMarket(ICErc20 cToken) external returns (uint256);\n\n  function getAssetAsCollateralValueCap(\n    ICErc20 collateral,\n    ICErc20 cTokenModify,\n    bool redeeming,\n    address account\n  ) external view returns (uint256);\n\n  function registerInSFS() external returns (uint256);\n}\n\ninterface UnitrollerInterface {\n  function comptrollerImplementation() external view returns (address);\n\n  function _upgrade() external;\n\n  function _acceptAdmin() external returns (uint256);\n\n  function _setPendingAdmin(address newPendingAdmin) external returns (uint256);\n\n  function _toggleAdminRights(bool hasRights) external returns (uint256);\n}\n\ninterface IComptrollerExtension is ComptrollerExtensionInterface, ComptrollerStorageInterface {}\n\n//interface IComptrollerBase is ComptrollerInterface, ComptrollerStorageInterface {}\n\ninterface IonicComptroller is\n  ComptrollerInterface,\n  ComptrollerExtensionInterface,\n  UnitrollerInterface,\n  ComptrollerStorageInterface\n{\n\n}\n\nabstract contract ComptrollerBase is ComptrollerV3Storage {\n  /// @notice Indicator that this is a Comptroller contract (for inspection)\n  bool public constant isComptroller = true;\n}\n"
    },
    "contracts/compound/CTokenInterfaces.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity >=0.8.0;\n\nimport { IonicComptroller } from \"./ComptrollerInterface.sol\";\nimport { InterestRateModel } from \"./InterestRateModel.sol\";\nimport { ComptrollerV3Storage } from \"./ComptrollerStorage.sol\";\n\nabstract contract CTokenAdminStorage {\n  /*\n   * Administrator for Ionic\n   */\n  address payable public ionicAdmin;\n}\n\nabstract contract CErc20Storage is CTokenAdminStorage {\n  /**\n   * @dev Guard variable for re-entrancy checks\n   */\n  bool internal _notEntered;\n\n  /**\n   * @notice EIP-20 token name for this token\n   */\n  string public name;\n\n  /**\n   * @notice EIP-20 token symbol for this token\n   */\n  string public symbol;\n\n  /**\n   * @notice EIP-20 token decimals for this token\n   */\n  uint8 public decimals;\n\n  /*\n   * Maximum borrow rate that can ever be applied (.0005% / block)\n   */\n  uint256 internal constant borrowRateMaxMantissa = 0.0005e16;\n\n  /*\n   * Maximum fraction of interest that can be set aside for reserves + fees\n   */\n  uint256 internal constant reserveFactorPlusFeesMaxMantissa = 1e18;\n\n  /**\n   * @notice Contract which oversees inter-cToken operations\n   */\n  IonicComptroller public comptroller;\n\n  /**\n   * @notice Model which tells what the current interest rate should be\n   */\n  InterestRateModel public interestRateModel;\n\n  /*\n   * Initial exchange rate used when minting the first CTokens (used when totalSupply = 0)\n   */\n  uint256 internal initialExchangeRateMantissa;\n\n  /**\n   * @notice Fraction of interest currently set aside for admin fees\n   */\n  uint256 public adminFeeMantissa;\n\n  /**\n   * @notice Fraction of interest currently set aside for Ionic fees\n   */\n  uint256 public ionicFeeMantissa;\n\n  /**\n   * @notice Fraction of interest currently set aside for reserves\n   */\n  uint256 public reserveFactorMantissa;\n\n  /**\n   * @notice Block number that interest was last accrued at\n   */\n  uint256 public accrualBlockNumber;\n\n  /**\n   * @notice Accumulator of the total earned interest rate since the opening of the market\n   */\n  uint256 public borrowIndex;\n\n  /**\n   * @notice Total amount of outstanding borrows of the underlying in this market\n   */\n  uint256 public totalBorrows;\n\n  /**\n   * @notice Total amount of reserves of the underlying held in this market\n   */\n  uint256 public totalReserves;\n\n  /**\n   * @notice Total amount of admin fees of the underlying held in this market\n   */\n  uint256 public totalAdminFees;\n\n  /**\n   * @notice Total amount of Ionic fees of the underlying held in this market\n   */\n  uint256 public totalIonicFees;\n\n  /**\n   * @notice Total number of tokens in circulation\n   */\n  uint256 public totalSupply;\n\n  /*\n   * Official record of token balances for each account\n   */\n  mapping(address => uint256) internal accountTokens;\n\n  /*\n   * Approved token transfer amounts on behalf of others\n   */\n  mapping(address => mapping(address => uint256)) internal transferAllowances;\n\n  /**\n   * @notice Container for borrow balance information\n   * @member principal Total balance (with accrued interest), after applying the most recent balance-changing action\n   * @member interestIndex Global borrowIndex as of the most recent balance-changing action\n   */\n  struct BorrowSnapshot {\n    uint256 principal;\n    uint256 interestIndex;\n  }\n\n  /*\n   * Mapping of account addresses to outstanding borrow balances\n   */\n  mapping(address => BorrowSnapshot) internal accountBorrows;\n\n  /*\n   * Share of seized collateral that is added to reserves\n   */\n  uint256 public constant protocolSeizeShareMantissa = 2.8e16; //2.8%\n\n  /*\n   * Share of seized collateral taken as fees\n   */\n  uint256 public constant feeSeizeShareMantissa = 1e17; //10%\n\n  /**\n   * @notice Underlying asset for this CToken\n   */\n  address public underlying;\n}\n\nabstract contract CTokenBaseEvents {\n  /* ERC20 */\n\n  /**\n   * @notice EIP20 Transfer event\n   */\n  event Transfer(address indexed from, address indexed to, uint256 amount);\n\n  /*** Admin Events ***/\n\n  /**\n   * @notice Event emitted when interestRateModel is changed\n   */\n  event NewMarketInterestRateModel(InterestRateModel oldInterestRateModel, InterestRateModel newInterestRateModel);\n\n  /**\n   * @notice Event emitted when the reserve factor is changed\n   */\n  event NewReserveFactor(uint256 oldReserveFactorMantissa, uint256 newReserveFactorMantissa);\n\n  /**\n   * @notice Event emitted when the admin fee is changed\n   */\n  event NewAdminFee(uint256 oldAdminFeeMantissa, uint256 newAdminFeeMantissa);\n\n  /**\n   * @notice Event emitted when the Ionic fee is changed\n   */\n  event NewIonicFee(uint256 oldIonicFeeMantissa, uint256 newIonicFeeMantissa);\n\n  /**\n   * @notice EIP20 Approval event\n   */\n  event Approval(address indexed owner, address indexed spender, uint256 amount);\n\n  /**\n   * @notice Event emitted when interest is accrued\n   */\n  event AccrueInterest(uint256 cashPrior, uint256 interestAccumulated, uint256 borrowIndex, uint256 totalBorrows);\n}\n\nabstract contract CTokenFirstExtensionEvents is CTokenBaseEvents {\n  event Flash(address receiver, uint256 amount);\n}\n\nabstract contract CTokenSecondExtensionEvents is CTokenBaseEvents {\n  /*** Market Events ***/\n\n  /**\n   * @notice Event emitted when tokens are minted\n   */\n  event Mint(address minter, uint256 mintAmount, uint256 mintTokens);\n\n  /**\n   * @notice Event emitted when tokens are redeemed\n   */\n  event Redeem(address redeemer, uint256 redeemAmount, uint256 redeemTokens);\n\n  /**\n   * @notice Event emitted when underlying is borrowed\n   */\n  event Borrow(address borrower, uint256 borrowAmount, uint256 accountBorrows, uint256 totalBorrows);\n\n  /**\n   * @notice Event emitted when a borrow is repaid\n   */\n  event RepayBorrow(address payer, address borrower, uint256 repayAmount, uint256 accountBorrows, uint256 totalBorrows);\n\n  /**\n   * @notice Event emitted when a borrow is liquidated\n   */\n  event LiquidateBorrow(\n    address liquidator,\n    address borrower,\n    uint256 repayAmount,\n    address cTokenCollateral,\n    uint256 seizeTokens\n  );\n\n  /**\n   * @notice Event emitted when the reserves are added\n   */\n  event ReservesAdded(address benefactor, uint256 addAmount, uint256 newTotalReserves);\n\n  /**\n   * @notice Event emitted when the reserves are reduced\n   */\n  event ReservesReduced(address admin, uint256 reduceAmount, uint256 newTotalReserves);\n}\n\ninterface CTokenFirstExtensionInterface {\n  /*** User Interface ***/\n\n  function transfer(address dst, uint256 amount) external returns (bool);\n\n  function transferFrom(\n    address src,\n    address dst,\n    uint256 amount\n  ) external returns (bool);\n\n  function approve(address spender, uint256 amount) external returns (bool);\n\n  function allowance(address owner, address spender) external view returns (uint256);\n\n  function balanceOf(address owner) external view returns (uint256);\n\n  /*** Admin Functions ***/\n\n  function _setReserveFactor(uint256 newReserveFactorMantissa) external returns (uint256);\n\n  function _setAdminFee(uint256 newAdminFeeMantissa) external returns (uint256);\n\n  function _setInterestRateModel(InterestRateModel newInterestRateModel) external returns (uint256);\n\n  function getAccountSnapshot(address account)\n    external\n    view\n    returns (\n      uint256,\n      uint256,\n      uint256,\n      uint256\n    );\n\n  function borrowRatePerBlock() external view returns (uint256);\n\n  function supplyRatePerBlock() external view returns (uint256);\n\n  function exchangeRateCurrent() external view returns (uint256);\n\n  function accrueInterest() external returns (uint256);\n\n  function totalBorrowsCurrent() external view returns (uint256);\n\n  function borrowBalanceCurrent(address account) external view returns (uint256);\n\n  function getTotalUnderlyingSupplied() external view returns (uint256);\n\n  function balanceOfUnderlying(address owner) external view returns (uint256);\n\n  function multicall(bytes[] calldata data) external payable returns (bytes[] memory results);\n\n  function flash(uint256 amount, bytes calldata data) external;\n\n  function supplyRatePerBlockAfterDeposit(uint256 mintAmount) external view returns (uint256);\n\n  function supplyRatePerBlockAfterWithdraw(uint256 withdrawAmount) external view returns (uint256);\n\n  function borrowRatePerBlockAfterBorrow(uint256 borrowAmount) external view returns (uint256);\n\n  function registerInSFS() external returns (uint256);\n}\n\ninterface CTokenSecondExtensionInterface {\n  function mint(uint256 mintAmount) external returns (uint256);\n\n  function redeem(uint256 redeemTokens) external returns (uint256);\n\n  function redeemUnderlying(uint256 redeemAmount) external returns (uint256);\n\n  function borrow(uint256 borrowAmount) external returns (uint256);\n\n  function repayBorrow(uint256 repayAmount) external returns (uint256);\n\n  function repayBorrowBehalf(address borrower, uint256 repayAmount) external returns (uint256);\n\n  function liquidateBorrow(\n    address borrower,\n    uint256 repayAmount,\n    address cTokenCollateral\n  ) external returns (uint256);\n\n  function getCash() external view returns (uint256);\n\n  function seize(\n    address liquidator,\n    address borrower,\n    uint256 seizeTokens\n  ) external returns (uint256);\n\n  /*** Admin Functions ***/\n\n  function _withdrawAdminFees(uint256 withdrawAmount) external returns (uint256);\n\n  function _withdrawIonicFees(uint256 withdrawAmount) external returns (uint256);\n\n  function selfTransferOut(address to, uint256 amount) external;\n\n  function selfTransferIn(address from, uint256 amount) external returns (uint256);\n}\n\ninterface CDelegatorInterface {\n  function implementation() external view returns (address);\n\n  /**\n   * @notice Called by the admin to update the implementation of the delegator\n   * @param implementation_ The address of the new implementation for delegation\n   * @param becomeImplementationData The encoded bytes data to be passed to _becomeImplementation\n   */\n  function _setImplementationSafe(address implementation_, bytes calldata becomeImplementationData) external;\n\n  /**\n   * @dev upgrades the implementation if necessary\n   */\n  function _upgrade() external;\n}\n\ninterface CDelegateInterface {\n  /**\n   * @notice Called by the delegator on a delegate to initialize it for duty\n   * @dev Should revert if any issues arise which make it unfit for delegation\n   * @param data The encoded bytes data for any initialization\n   */\n  function _becomeImplementation(bytes calldata data) external;\n\n  function delegateType() external pure returns (uint8);\n\n  function contractType() external pure returns (string memory);\n}\n\nabstract contract CErc20AdminBase is CErc20Storage {\n  /**\n   * @notice Returns a boolean indicating if the sender has admin rights\n   */\n  function hasAdminRights() internal view returns (bool) {\n    ComptrollerV3Storage comptrollerStorage = ComptrollerV3Storage(address(comptroller));\n    return\n      (msg.sender == comptrollerStorage.admin() && comptrollerStorage.adminHasRights()) ||\n      (msg.sender == address(ionicAdmin) && comptrollerStorage.ionicAdminHasRights());\n  }\n}\n\nabstract contract CErc20FirstExtensionBase is\n  CErc20AdminBase,\n  CTokenFirstExtensionEvents,\n  CTokenFirstExtensionInterface\n{}\n\nabstract contract CTokenSecondExtensionBase is\n  CErc20AdminBase,\n  CTokenSecondExtensionEvents,\n  CTokenSecondExtensionInterface,\n  CDelegateInterface\n{}\n\nabstract contract CErc20DelegatorBase is CErc20AdminBase, CTokenSecondExtensionEvents, CDelegatorInterface {}\n\ninterface CErc20StorageInterface {\n  function admin() external view returns (address);\n\n  function adminHasRights() external view returns (bool);\n\n  function ionicAdmin() external view returns (address);\n\n  function ionicAdminHasRights() external view returns (bool);\n\n  function comptroller() external view returns (IonicComptroller);\n\n  function name() external view returns (string memory);\n\n  function symbol() external view returns (string memory);\n\n  function decimals() external view returns (uint8);\n\n  function totalSupply() external view returns (uint256);\n\n  function adminFeeMantissa() external view returns (uint256);\n\n  function ionicFeeMantissa() external view returns (uint256);\n\n  function reserveFactorMantissa() external view returns (uint256);\n\n  function protocolSeizeShareMantissa() external view returns (uint256);\n\n  function feeSeizeShareMantissa() external view returns (uint256);\n\n  function totalReserves() external view returns (uint256);\n\n  function totalAdminFees() external view returns (uint256);\n\n  function totalIonicFees() external view returns (uint256);\n\n  function totalBorrows() external view returns (uint256);\n\n  function accrualBlockNumber() external view returns (uint256);\n\n  function underlying() external view returns (address);\n\n  function borrowIndex() external view returns (uint256);\n\n  function interestRateModel() external view returns (address);\n}\n\ninterface CErc20PluginStorageInterface is CErc20StorageInterface {\n  function plugin() external view returns (address);\n}\n\ninterface CErc20PluginRewardsInterface is CErc20PluginStorageInterface {\n  function approve(address, address) external;\n}\n\ninterface ICErc20 is\n  CErc20StorageInterface,\n  CTokenSecondExtensionInterface,\n  CTokenFirstExtensionInterface,\n  CDelegatorInterface,\n  CDelegateInterface\n{}\n\ninterface ICErc20Plugin is CErc20PluginStorageInterface, ICErc20 {\n  function _updatePlugin(address _plugin) external;\n}\n\ninterface ICErc20PluginRewards is CErc20PluginRewardsInterface, ICErc20 {}\n"
    },
    "contracts/oracles/BasePriceOracle.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity >=0.8.0;\n\nimport \"../compound/CTokenInterfaces.sol\";\n\n/**\n * @title BasePriceOracle\n * @notice Returns prices of underlying tokens directly without the caller having to specify a cToken address.\n * @dev Implements the `PriceOracle` interface.\n * @author David Lucid <david@rari.capital> (https://github.com/davidlucid)\n */\ninterface BasePriceOracle {\n  /**\n   * @notice Get the price of an underlying asset.\n   * @param underlying The underlying asset to get the price of.\n   * @return The underlying asset price in ETH as a mantissa (scaled by 1e18).\n   * Zero means the price is unavailable.\n   */\n  function price(address underlying) external view returns (uint256);\n\n  /**\n   * @notice Get the underlying price of a cToken asset\n   * @param cToken The cToken to get the underlying price of\n   * @return The underlying asset price mantissa (scaled by 1e18).\n   *  Zero means the price is unavailable.\n   */\n  function getUnderlyingPrice(ICErc20 cToken) external view returns (uint256);\n}\n"
    },
    "contracts/liquidators/IFundsConversionStrategy.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity >=0.8.0;\n\nimport \"./IRedemptionStrategy.sol\";\nimport \"openzeppelin-contracts-upgradeable/contracts/token/ERC20/IERC20Upgradeable.sol\";\n\ninterface IFundsConversionStrategy is IRedemptionStrategy {\n  function convert(\n    IERC20Upgradeable inputToken,\n    uint256 inputAmount,\n    bytes memory strategyData\n  ) external returns (IERC20Upgradeable outputToken, uint256 outputAmount);\n\n  function estimateInputAmount(uint256 outputAmount, bytes memory strategyData)\n    external\n    view\n    returns (IERC20Upgradeable inputToken, uint256 inputAmount);\n}\n"
    },
    "contracts/liquidators/IRedemptionStrategy.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity >=0.8.0;\n\nimport \"openzeppelin-contracts-upgradeable/contracts/token/ERC20/IERC20Upgradeable.sol\";\n\n/**\n * @title IRedemptionStrategy\n * @notice Redeems seized wrapped token collateral for an underlying token for use as a step in a liquidation.\n * @author David Lucid <david@rari.capital> (https://github.com/davidlucid)\n */\ninterface IRedemptionStrategy {\n  /**\n   * @notice Redeems custom collateral `token` for an underlying token.\n   * @param inputToken The input wrapped token to be redeemed for an underlying token.\n   * @param inputAmount The amount of the input wrapped token to be redeemed for an underlying token.\n   * @param strategyData The ABI-encoded data to be used in the redemption strategy logic.\n   * @return outputToken The underlying ERC20 token outputted.\n   * @return outputAmount The quantity of underlying tokens outputted.\n   */\n  function redeem(\n    IERC20Upgradeable inputToken,\n    uint256 inputAmount,\n    bytes memory strategyData\n  ) external returns (IERC20Upgradeable outputToken, uint256 outputAmount);\n\n  function name() external view returns (string memory);\n}\n"
    },
    "contracts/ionic/levered/ILeveredPositionFactory.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity >=0.8.0;\n\nimport { IRedemptionStrategy } from \"../../liquidators/IRedemptionStrategy.sol\";\nimport { ICErc20 } from \"../../compound/CTokenInterfaces.sol\";\nimport { LeveredPosition } from \"./LeveredPosition.sol\";\nimport { IFeeDistributor } from \"../../compound/IFeeDistributor.sol\";\nimport { ILiquidatorsRegistry } from \"../../liquidators/registry/ILiquidatorsRegistry.sol\";\n\nimport \"openzeppelin-contracts-upgradeable/contracts/token/ERC20/IERC20Upgradeable.sol\";\n\ninterface ILeveredPositionFactoryStorage {\n  function feeDistributor() external view returns (IFeeDistributor);\n\n  function liquidatorsRegistry() external view returns (ILiquidatorsRegistry);\n\n  function blocksPerYear() external view returns (uint256);\n\n  function owner() external view returns (address);\n}\n\ninterface ILeveredPositionFactoryBase {\n  function _setLiquidatorsRegistry(ILiquidatorsRegistry _liquidatorsRegistry) external;\n\n  function _setPairWhitelisted(\n    ICErc20 _collateralMarket,\n    ICErc20 _stableMarket,\n    bool _whitelisted\n  ) external;\n}\n\ninterface ILeveredPositionFactoryFirstExtension {\n  function getRedemptionStrategies(IERC20Upgradeable inputToken, IERC20Upgradeable outputToken)\n    external\n    view\n    returns (IRedemptionStrategy[] memory strategies, bytes[] memory strategiesData);\n\n  function getMinBorrowNative() external view returns (uint256);\n\n  function removeClosedPosition(address closedPosition) external returns (bool removed);\n\n  function closeAndRemoveUserPosition(LeveredPosition position) external returns (bool);\n\n  function getPositionsByAccount(address account) external view returns (address[] memory, bool[] memory);\n\n  function getAccountsWithOpenPositions() external view returns (address[] memory);\n\n  function getWhitelistedCollateralMarkets() external view returns (address[] memory);\n\n  function getBorrowableMarketsByCollateral(ICErc20 _collateralMarket) external view returns (address[] memory);\n\n  function getPositionsExtension(bytes4 msgSig) external view returns (address);\n}\n\ninterface ILeveredPositionFactorySecondExtension {\n  function createPosition(ICErc20 _collateralMarket, ICErc20 _stableMarket) external returns (LeveredPosition);\n\n  function createAndFundPosition(\n    ICErc20 _collateralMarket,\n    ICErc20 _stableMarket,\n    IERC20Upgradeable _fundingAsset,\n    uint256 _fundingAmount\n  ) external returns (LeveredPosition);\n\n  function createAndFundPositionAtRatio(\n    ICErc20 _collateralMarket,\n    ICErc20 _stableMarket,\n    IERC20Upgradeable _fundingAsset,\n    uint256 _fundingAmount,\n    uint256 _leverageRatio\n  ) external returns (LeveredPosition);\n}\n\ninterface ILeveredPositionFactoryExtension is\n  ILeveredPositionFactoryFirstExtension,\n  ILeveredPositionFactorySecondExtension\n{}\n\ninterface ILeveredPositionFactory is\n  ILeveredPositionFactoryStorage,\n  ILeveredPositionFactoryBase,\n  ILeveredPositionFactoryExtension\n{}\n"
    },
    "contracts/ionic/IFlashLoanReceiver.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity >=0.8.0;\n\ninterface IFlashLoanReceiver {\n  function receiveFlashLoan(\n    address borrowedAsset,\n    uint256 borrowedAmount,\n    bytes calldata data\n  ) external;\n}\n"
    },
    "contracts/ionic/strategies/flywheel/IonicFlywheel.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-only\npragma solidity ^0.8.10;\n\nimport { ERC20 } from \"solmate/tokens/ERC20.sol\";\nimport { IonicFlywheelCore } from \"./IonicFlywheelCore.sol\";\nimport \"./IIonicFlywheel.sol\";\n\ncontract IonicFlywheel is IonicFlywheelCore, IIonicFlywheel {\n  bool public constant isRewardsDistributor = true;\n  bool public constant isFlywheel = true;\n\n  function flywheelPreSupplierAction(address market, address supplier) external {\n    accrue(ERC20(market), supplier);\n  }\n\n  function flywheelPreBorrowerAction(address market, address borrower) external {}\n\n  function flywheelPreTransferAction(\n    address market,\n    address src,\n    address dst\n  ) external {\n    accrue(ERC20(market), src, dst);\n  }\n\n  function compAccrued(address user) external view returns (uint256) {\n    return _rewardsAccrued[user];\n  }\n\n  function addMarketForRewards(ERC20 strategy) external onlyOwner {\n    _addStrategyForRewards(strategy);\n  }\n\n  // TODO remove\n  function marketState(ERC20 strategy) external view returns (uint224, uint32) {\n    return (_strategyState[strategy].index, _strategyState[strategy].lastUpdatedTimestamp);\n  }\n}\n"
    },
    "lib/solmate/src/tokens/ERC20.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-only\npragma solidity >=0.8.0;\n\n/// @notice Modern and gas efficient ERC20 + EIP-2612 implementation.\n/// @author Solmate (https://github.com/transmissions11/solmate/blob/main/src/tokens/ERC20.sol)\n/// @author Modified from Uniswap (https://github.com/Uniswap/uniswap-v2-core/blob/master/contracts/UniswapV2ERC20.sol)\n/// @dev Do not manually set balances without updating totalSupply, as the sum of all user balances must not exceed it.\nabstract contract ERC20 {\n    /*//////////////////////////////////////////////////////////////\n                                 EVENTS\n    //////////////////////////////////////////////////////////////*/\n\n    event Transfer(address indexed from, address indexed to, uint256 amount);\n\n    event Approval(address indexed owner, address indexed spender, uint256 amount);\n\n    /*//////////////////////////////////////////////////////////////\n                            METADATA STORAGE\n    //////////////////////////////////////////////////////////////*/\n\n    string public name;\n\n    string public symbol;\n\n    uint8 public immutable decimals;\n\n    /*//////////////////////////////////////////////////////////////\n                              ERC20 STORAGE\n    //////////////////////////////////////////////////////////////*/\n\n    uint256 public totalSupply;\n\n    mapping(address => uint256) public balanceOf;\n\n    mapping(address => mapping(address => uint256)) public allowance;\n\n    /*//////////////////////////////////////////////////////////////\n                            EIP-2612 STORAGE\n    //////////////////////////////////////////////////////////////*/\n\n    uint256 internal immutable INITIAL_CHAIN_ID;\n\n    bytes32 internal immutable INITIAL_DOMAIN_SEPARATOR;\n\n    mapping(address => uint256) public nonces;\n\n    /*//////////////////////////////////////////////////////////////\n                               CONSTRUCTOR\n    //////////////////////////////////////////////////////////////*/\n\n    constructor(\n        string memory _name,\n        string memory _symbol,\n        uint8 _decimals\n    ) {\n        name = _name;\n        symbol = _symbol;\n        decimals = _decimals;\n\n        INITIAL_CHAIN_ID = block.chainid;\n        INITIAL_DOMAIN_SEPARATOR = computeDomainSeparator();\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                               ERC20 LOGIC\n    //////////////////////////////////////////////////////////////*/\n\n    function approve(address spender, uint256 amount) public virtual returns (bool) {\n        allowance[msg.sender][spender] = amount;\n\n        emit Approval(msg.sender, spender, amount);\n\n        return true;\n    }\n\n    function transfer(address to, uint256 amount) public virtual returns (bool) {\n        balanceOf[msg.sender] -= amount;\n\n        // Cannot overflow because the sum of all user\n        // balances can't exceed the max uint256 value.\n        unchecked {\n            balanceOf[to] += amount;\n        }\n\n        emit Transfer(msg.sender, to, amount);\n\n        return true;\n    }\n\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) public virtual returns (bool) {\n        uint256 allowed = allowance[from][msg.sender]; // Saves gas for limited approvals.\n\n        if (allowed != type(uint256).max) allowance[from][msg.sender] = allowed - amount;\n\n        balanceOf[from] -= amount;\n\n        // Cannot overflow because the sum of all user\n        // balances can't exceed the max uint256 value.\n        unchecked {\n            balanceOf[to] += amount;\n        }\n\n        emit Transfer(from, to, amount);\n\n        return true;\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                             EIP-2612 LOGIC\n    //////////////////////////////////////////////////////////////*/\n\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) public virtual {\n        require(deadline >= block.timestamp, \"PERMIT_DEADLINE_EXPIRED\");\n\n        // Unchecked because the only math done is incrementing\n        // the owner's nonce which cannot realistically overflow.\n        unchecked {\n            address recoveredAddress = ecrecover(\n                keccak256(\n                    abi.encodePacked(\n                        \"\\x19\\x01\",\n                        DOMAIN_SEPARATOR(),\n                        keccak256(\n                            abi.encode(\n                                keccak256(\n                                    \"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\"\n                                ),\n                                owner,\n                                spender,\n                                value,\n                                nonces[owner]++,\n                                deadline\n                            )\n                        )\n                    )\n                ),\n                v,\n                r,\n                s\n            );\n\n            require(recoveredAddress != address(0) && recoveredAddress == owner, \"INVALID_SIGNER\");\n\n            allowance[recoveredAddress][spender] = value;\n        }\n\n        emit Approval(owner, spender, value);\n    }\n\n    function DOMAIN_SEPARATOR() public view virtual returns (bytes32) {\n        return block.chainid == INITIAL_CHAIN_ID ? INITIAL_DOMAIN_SEPARATOR : computeDomainSeparator();\n    }\n\n    function computeDomainSeparator() internal view virtual returns (bytes32) {\n        return\n            keccak256(\n                abi.encode(\n                    keccak256(\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\"),\n                    keccak256(bytes(name)),\n                    keccak256(\"1\"),\n                    block.chainid,\n                    address(this)\n                )\n            );\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                        INTERNAL MINT/BURN LOGIC\n    //////////////////////////////////////////////////////////////*/\n\n    function _mint(address to, uint256 amount) internal virtual {\n        totalSupply += amount;\n\n        // Cannot overflow because the sum of all user\n        // balances can't exceed the max uint256 value.\n        unchecked {\n            balanceOf[to] += amount;\n        }\n\n        emit Transfer(address(0), to, amount);\n    }\n\n    function _burn(address from, uint256 amount) internal virtual {\n        balanceOf[from] -= amount;\n\n        // Cannot underflow because a user's balance\n        // will never be larger than the total supply.\n        unchecked {\n            totalSupply -= amount;\n        }\n\n        emit Transfer(from, address(0), amount);\n    }\n}\n"
    },
    "contracts/ionic/levered/LeveredPositionStorage.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity ^0.8.10;\n\nimport { ILeveredPositionFactory } from \"./ILeveredPositionFactory.sol\";\nimport { IonicComptroller } from \"../../compound/ComptrollerInterface.sol\";\nimport { ICErc20 } from \"../../compound/CTokenInterfaces.sol\";\n\nimport \"openzeppelin-contracts-upgradeable/contracts/token/ERC20/IERC20Upgradeable.sol\";\n\ncontract LeveredPositionStorage {\n  address public immutable positionOwner;\n  ILeveredPositionFactory public factory;\n\n  ICErc20 public collateralMarket;\n  ICErc20 public stableMarket;\n  IonicComptroller public pool;\n\n  IERC20Upgradeable public collateralAsset;\n  IERC20Upgradeable public stableAsset;\n\n  constructor(address _positionOwner) {\n    positionOwner = _positionOwner;\n  }\n}\n"
    },
    "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/utils/SafeERC20Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20Upgradeable.sol\";\nimport \"../extensions/draft-IERC20PermitUpgradeable.sol\";\nimport \"../../../utils/AddressUpgradeable.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20Upgradeable {\n    using AddressUpgradeable for address;\n\n    function safeTransfer(\n        IERC20Upgradeable token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20Upgradeable token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20Upgradeable token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20Upgradeable token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20Upgradeable token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    function safePermit(\n        IERC20PermitUpgradeable token,\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal {\n        uint256 nonceBefore = token.nonces(owner);\n        token.permit(owner, spender, value, deadline, v, r, s);\n        uint256 nonceAfter = token.nonces(owner);\n        require(nonceAfter == nonceBefore + 1, \"SafeERC20: permit did not succeed\");\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
    },
    "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/IERC20Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20Upgradeable {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"
    },
    "contracts/compound/ComptrollerStorage.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity >=0.8.0;\n\nimport \"./IFeeDistributor.sol\";\nimport \"../oracles/BasePriceOracle.sol\";\nimport { ICErc20 } from \"./CTokenInterfaces.sol\";\n\nimport \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\";\n\ncontract UnitrollerAdminStorage {\n  /*\n   * Administrator for Ionic\n   */\n  address payable public ionicAdmin;\n\n  /**\n   * @notice Administrator for this contract\n   */\n  address public admin;\n\n  /**\n   * @notice Pending administrator for this contract\n   */\n  address public pendingAdmin;\n\n  /**\n   * @notice Whether or not the Ionic admin has admin rights\n   */\n  bool public ionicAdminHasRights = true;\n\n  /**\n   * @notice Whether or not the admin has admin rights\n   */\n  bool public adminHasRights = true;\n\n  /**\n   * @notice Returns a boolean indicating if the sender has admin rights\n   */\n  function hasAdminRights() internal view returns (bool) {\n    return (msg.sender == admin && adminHasRights) || (msg.sender == address(ionicAdmin) && ionicAdminHasRights);\n  }\n}\n\ncontract ComptrollerV1Storage is UnitrollerAdminStorage {\n  /**\n   * @notice Oracle which gives the price of any given asset\n   */\n  BasePriceOracle public oracle;\n\n  /**\n   * @notice Multiplier used to calculate the maximum repayAmount when liquidating a borrow\n   */\n  uint256 public closeFactorMantissa;\n\n  /**\n   * @notice Multiplier representing the discount on collateral that a liquidator receives\n   */\n  uint256 public liquidationIncentiveMantissa;\n\n  /*\n   * UNUSED AFTER UPGRADE: Max number of assets a single account can participate in (borrow or use as collateral)\n   */\n  uint256 internal maxAssets;\n\n  /**\n   * @notice Per-account mapping of \"assets you are in\", capped by maxAssets\n   */\n  mapping(address => ICErc20[]) public accountAssets;\n}\n\ncontract ComptrollerV2Storage is ComptrollerV1Storage {\n  struct Market {\n    // Whether or not this market is listed\n    bool isListed;\n    // Multiplier representing the most one can borrow against their collateral in this market.\n    // For instance, 0.9 to allow borrowing 90% of collateral value.\n    // Must be between 0 and 1, and stored as a mantissa.\n    uint256 collateralFactorMantissa;\n    // Per-market mapping of \"accounts in this asset\"\n    mapping(address => bool) accountMembership;\n  }\n\n  /**\n   * @notice Official mapping of cTokens -> Market metadata\n   * @dev Used e.g. to determine if a market is supported\n   */\n  mapping(address => Market) public markets;\n\n  /// @notice A list of all markets\n  ICErc20[] public allMarkets;\n\n  /**\n   * @dev Maps borrowers to booleans indicating if they have entered any markets\n   */\n  mapping(address => bool) internal borrowers;\n\n  /// @notice A list of all borrowers who have entered markets\n  address[] public allBorrowers;\n\n  // Indexes of borrower account addresses in the `allBorrowers` array\n  mapping(address => uint256) internal borrowerIndexes;\n\n  /**\n   * @dev Maps suppliers to booleans indicating if they have ever supplied to any markets\n   */\n  mapping(address => bool) public suppliers;\n\n  /// @notice All cTokens addresses mapped by their underlying token addresses\n  mapping(address => ICErc20) public cTokensByUnderlying;\n\n  /// @notice Whether or not the supplier whitelist is enforced\n  bool public enforceWhitelist;\n\n  /// @notice Maps addresses to booleans indicating if they are allowed to supply assets (i.e., mint cTokens)\n  mapping(address => bool) public whitelist;\n\n  /// @notice An array of all whitelisted accounts\n  address[] public whitelistArray;\n\n  // Indexes of account addresses in the `whitelistArray` array\n  mapping(address => uint256) internal whitelistIndexes;\n\n  /**\n   * @notice The Pause Guardian can pause certain actions as a safety mechanism.\n   *  Actions which allow users to remove their own assets cannot be paused.\n   *  Liquidation / seizing / transfer can only be paused globally, not by market.\n   */\n  address public pauseGuardian;\n  bool public _mintGuardianPaused;\n  bool public _borrowGuardianPaused;\n  bool public transferGuardianPaused;\n  bool public seizeGuardianPaused;\n  mapping(address => bool) public mintGuardianPaused;\n  mapping(address => bool) public borrowGuardianPaused;\n}\n\ncontract ComptrollerV3Storage is ComptrollerV2Storage {\n  /// @notice The borrowCapGuardian can set borrowCaps to any number for any market. Lowering the borrow cap could disable borrowing on the given market.\n  address public borrowCapGuardian;\n\n  /// @notice Borrow caps enforced by borrowAllowed for each cToken address. Defaults to zero which corresponds to unlimited borrowing.\n  mapping(address => uint256) public borrowCaps;\n\n  /// @notice Supply caps enforced by mintAllowed for each cToken address. Defaults to zero which corresponds to unlimited supplying.\n  mapping(address => uint256) public supplyCaps;\n\n  /// @notice RewardsDistributor contracts to notify of flywheel changes.\n  address[] public rewardsDistributors;\n\n  /// @dev Guard variable for pool-wide/cross-asset re-entrancy checks\n  bool internal _notEntered;\n\n  /// @dev Whether or not _notEntered has been initialized\n  bool internal _notEnteredInitialized;\n\n  /// @notice RewardsDistributor to list for claiming, but not to notify of flywheel changes.\n  address[] public nonAccruingRewardsDistributors;\n\n  /// @dev cap for each user's borrows against specific assets - denominated in the borrowed asset\n  mapping(address => mapping(address => uint256)) public borrowCapForCollateral;\n\n  /// @dev blacklist to disallow the borrowing of an asset against specific collateral\n  mapping(address => mapping(address => bool)) public borrowingAgainstCollateralBlacklist;\n\n  /// @dev set of whitelisted accounts that are allowed to bypass the borrowing against specific collateral cap\n  mapping(address => mapping(address => EnumerableSet.AddressSet)) internal borrowCapForCollateralWhitelist;\n\n  /// @dev set of whitelisted accounts that are allowed to bypass the borrow cap\n  mapping(address => mapping(address => EnumerableSet.AddressSet))\n    internal borrowingAgainstCollateralBlacklistWhitelist;\n\n  /// @dev set of whitelisted accounts that are allowed to bypass the supply cap\n  mapping(address => EnumerableSet.AddressSet) internal supplyCapWhitelist;\n\n  /// @dev set of whitelisted accounts that are allowed to bypass the borrow cap\n  mapping(address => EnumerableSet.AddressSet) internal borrowCapWhitelist;\n}\n"
    },
    "contracts/compound/InterestRateModel.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity >=0.8.0;\n\n/**\n * @title Compound's InterestRateModel Interface\n * @author Compound\n */\nabstract contract InterestRateModel {\n  /// @notice Indicator that this is an InterestRateModel contract (for inspection)\n  bool public constant isInterestRateModel = true;\n\n  /**\n   * @notice Calculates the current borrow interest rate per block\n   * @param cash The total amount of cash the market has\n   * @param borrows The total amount of borrows the market has outstanding\n   * @param reserves The total amount of reserves the market has\n   * @return The borrow rate per block (as a percentage, and scaled by 1e18)\n   */\n  function getBorrowRate(\n    uint256 cash,\n    uint256 borrows,\n    uint256 reserves\n  ) public view virtual returns (uint256);\n\n  /**\n   * @notice Calculates the current supply interest rate per block\n   * @param cash The total amount of cash the market has\n   * @param borrows The total amount of borrows the market has outstanding\n   * @param reserves The total amount of reserves the market has\n   * @param reserveFactorMantissa The current reserve factor the market has\n   * @return The supply rate per block (as a percentage, and scaled by 1e18)\n   */\n  function getSupplyRate(\n    uint256 cash,\n    uint256 borrows,\n    uint256 reserves,\n    uint256 reserveFactorMantissa\n  ) public view virtual returns (uint256);\n}\n"
    },
    "contracts/compound/IFeeDistributor.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity >=0.8.0;\n\nimport \"../ionic/AuthoritiesRegistry.sol\";\n\ninterface IFeeDistributor {\n  function minBorrowEth() external view returns (uint256);\n\n  function maxUtilizationRate() external view returns (uint256);\n\n  function interestFeeRate() external view returns (uint256);\n\n  function latestComptrollerImplementation(address oldImplementation) external view returns (address);\n\n  function latestCErc20Delegate(uint8 delegateType)\n    external\n    view\n    returns (address cErc20Delegate, bytes memory becomeImplementationData);\n\n  function latestPluginImplementation(address oldImplementation) external view returns (address);\n\n  function getComptrollerExtensions(address comptroller) external view returns (address[] memory);\n\n  function getCErc20DelegateExtensions(address cErc20Delegate) external view returns (address[] memory);\n\n  function deployCErc20(\n    uint8 delegateType,\n    bytes calldata constructorData,\n    bytes calldata becomeImplData\n  ) external returns (address);\n\n  function canCall(\n    address pool,\n    address user,\n    address target,\n    bytes4 functionSig\n  ) external view returns (bool);\n\n  function authoritiesRegistry() external view returns (AuthoritiesRegistry);\n\n  fallback() external payable;\n\n  receive() external payable;\n}\n"
    },
    "contracts/liquidators/registry/ILiquidatorsRegistry.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity >=0.8.0;\n\nimport { IRedemptionStrategy } from \"../../liquidators/IRedemptionStrategy.sol\";\n\nimport \"openzeppelin-contracts-upgradeable/contracts/token/ERC20/IERC20Upgradeable.sol\";\n\ninterface ILiquidatorsRegistryStorage {\n  function redemptionStrategiesByName(string memory name) external view returns (IRedemptionStrategy);\n\n  function redemptionStrategiesByTokens(IERC20Upgradeable inputToken, IERC20Upgradeable outputToken)\n    external\n    view\n    returns (IRedemptionStrategy);\n\n  function defaultOutputToken(IERC20Upgradeable inputToken) external view returns (IERC20Upgradeable);\n\n  function owner() external view returns (address);\n\n  function uniswapV3Fees(IERC20Upgradeable inputToken, IERC20Upgradeable outputToken) external view returns (uint24);\n\n  function customUniV3Router(IERC20Upgradeable inputToken, IERC20Upgradeable outputToken)\n    external\n    view\n    returns (address);\n}\n\ninterface ILiquidatorsRegistryExtension {\n  function getInputTokensByOutputToken(IERC20Upgradeable outputToken) external view returns (address[] memory);\n\n  function getRedemptionStrategies(IERC20Upgradeable inputToken, IERC20Upgradeable outputToken)\n    external\n    view\n    returns (IRedemptionStrategy[] memory strategies, bytes[] memory strategiesData);\n\n  function getRedemptionStrategy(IERC20Upgradeable inputToken, IERC20Upgradeable outputToken)\n    external\n    view\n    returns (IRedemptionStrategy strategy, bytes memory strategyData);\n\n  function getAllRedemptionStrategies() external view returns (address[] memory);\n\n  function getSlippage(IERC20Upgradeable inputToken, IERC20Upgradeable outputToken)\n    external\n    view\n    returns (uint256 slippage);\n\n  function swap(\n    IERC20Upgradeable inputToken,\n    uint256 inputAmount,\n    IERC20Upgradeable outputToken\n  ) external returns (uint256);\n\n  function amountOutAndSlippageOfSwap(\n    IERC20Upgradeable inputToken,\n    uint256 inputAmount,\n    IERC20Upgradeable outputToken\n  ) external returns (uint256 outputAmount, uint256 slippage);\n}\n\ninterface ILiquidatorsRegistrySecondExtension {\n  function getAllPairsStrategies()\n    external\n    view\n    returns (\n      IRedemptionStrategy[] memory strategies,\n      IERC20Upgradeable[] memory inputTokens,\n      IERC20Upgradeable[] memory outputTokens\n    );\n\n  function pairsStrategiesMatch(\n    IRedemptionStrategy[] calldata configStrategies,\n    IERC20Upgradeable[] calldata configInputTokens,\n    IERC20Upgradeable[] calldata configOutputTokens\n  ) external view returns (bool);\n\n  function uniswapPairsFeesMatch(\n    IERC20Upgradeable[] calldata configInputTokens,\n    IERC20Upgradeable[] calldata configOutputTokens,\n    uint256[] calldata configFees\n  ) external view returns (bool);\n\n  function uniswapPairsRoutersMatch(\n    IERC20Upgradeable[] calldata configInputTokens,\n    IERC20Upgradeable[] calldata configOutputTokens,\n    address[] calldata configRouters\n  ) external view returns (bool);\n\n  function _setRedemptionStrategy(\n    IRedemptionStrategy strategy,\n    IERC20Upgradeable inputToken,\n    IERC20Upgradeable outputToken\n  ) external;\n\n  function _setRedemptionStrategies(\n    IRedemptionStrategy[] calldata strategies,\n    IERC20Upgradeable[] calldata inputTokens,\n    IERC20Upgradeable[] calldata outputTokens\n  ) external;\n\n  function _resetRedemptionStrategies(\n    IRedemptionStrategy[] calldata strategies,\n    IERC20Upgradeable[] calldata inputTokens,\n    IERC20Upgradeable[] calldata outputTokens\n  ) external;\n\n  function _removeRedemptionStrategy(IRedemptionStrategy strategyToRemove) external;\n\n  function _setDefaultOutputToken(IERC20Upgradeable inputToken, IERC20Upgradeable outputToken) external;\n\n  function _setUniswapV3Fees(\n    IERC20Upgradeable[] calldata inputTokens,\n    IERC20Upgradeable[] calldata outputTokens,\n    uint24[] calldata fees\n  ) external;\n\n  function _setUniswapV3Routers(\n    IERC20Upgradeable[] calldata inputTokens,\n    IERC20Upgradeable[] calldata outputTokens,\n    address[] calldata routers\n  ) external;\n\n  function _setSlippages(\n    IERC20Upgradeable[] calldata inputTokens,\n    IERC20Upgradeable[] calldata outputTokens,\n    uint256[] calldata slippages\n  ) external;\n}\n\ninterface ILiquidatorsRegistry is\n  ILiquidatorsRegistryExtension,\n  ILiquidatorsRegistrySecondExtension,\n  ILiquidatorsRegistryStorage\n{}\n"
    },
    "contracts/ionic/strategies/flywheel/IonicFlywheelCore.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-only\npragma solidity ^0.8.10;\n\nimport { ERC20 } from \"solmate/tokens/ERC20.sol\";\nimport { SafeTransferLib } from \"solmate/utils/SafeTransferLib.sol\";\nimport { SafeCastLib } from \"solmate/utils/SafeCastLib.sol\";\n\nimport { IFlywheelRewards } from \"flywheel-v2/interfaces/IFlywheelRewards.sol\";\nimport { IFlywheelBooster } from \"flywheel-v2/interfaces/IFlywheelBooster.sol\";\n\nimport { SafeOwnableUpgradeable } from \"../../../ionic/SafeOwnableUpgradeable.sol\";\n\ncontract IonicFlywheelCore is SafeOwnableUpgradeable {\n  using SafeTransferLib for ERC20;\n  using SafeCastLib for uint256;\n\n  /// @notice How much rewardsToken will be send to treasury\n  uint256 public performanceFee;\n\n  /// @notice Address that gets rewardsToken accrued by performanceFee\n  address public feeRecipient;\n\n  /// @notice The token to reward\n  ERC20 public rewardToken;\n\n  /// @notice append-only list of strategies added\n  ERC20[] public allStrategies;\n\n  /// @notice the rewards contract for managing streams\n  IFlywheelRewards public flywheelRewards;\n\n  /// @notice optional booster module for calculating virtual balances on strategies\n  IFlywheelBooster public flywheelBooster;\n\n  /// @notice The accrued but not yet transferred rewards for each user\n  mapping(address => uint256) internal _rewardsAccrued;\n\n  /// @notice The strategy index and last updated per strategy\n  mapping(ERC20 => RewardsState) internal _strategyState;\n\n  /// @notice user index per strategy\n  mapping(ERC20 => mapping(address => uint224)) internal _userIndex;\n\n  constructor() {\n    // prevents the misusage of the implementation contract\n    _disableInitializers();\n  }\n\n  function initialize(\n    ERC20 _rewardToken,\n    IFlywheelRewards _flywheelRewards,\n    IFlywheelBooster _flywheelBooster,\n    address _owner\n  ) public initializer {\n    __SafeOwnable_init(msg.sender);\n\n    rewardToken = _rewardToken;\n    flywheelRewards = _flywheelRewards;\n    flywheelBooster = _flywheelBooster;\n\n    _transferOwnership(_owner);\n\n    performanceFee = 10e16; // 10%\n    feeRecipient = _owner;\n  }\n\n  /*----------------------------------------------------------------\n                        ACCRUE/CLAIM LOGIC\n    ----------------------------------------------------------------*/\n\n  /** \n      @notice Emitted when a user's rewards accrue to a given strategy.\n      @param strategy the updated rewards strategy\n      @param user the user of the rewards\n      @param rewardsDelta how many new rewards accrued to the user\n      @param rewardsIndex the market index for rewards per token accrued\n    */\n  event AccrueRewards(ERC20 indexed strategy, address indexed user, uint256 rewardsDelta, uint256 rewardsIndex);\n\n  /** \n      @notice Emitted when a user claims accrued rewards.\n      @param user the user of the rewards\n      @param amount the amount of rewards claimed\n    */\n  event ClaimRewards(address indexed user, uint256 amount);\n\n  /** \n      @notice accrue rewards for a single user on a strategy\n      @param strategy the strategy to accrue a user's rewards on\n      @param user the user to be accrued\n      @return the cumulative amount of rewards accrued to user (including prior)\n    */\n  function accrue(ERC20 strategy, address user) public returns (uint256) {\n    (uint224 index, uint32 ts) = strategyState(strategy);\n    RewardsState memory state = RewardsState(index, ts);\n\n    if (state.index == 0) return 0;\n\n    state = accrueStrategy(strategy, state);\n    return accrueUser(strategy, user, state);\n  }\n\n  /** \n      @notice accrue rewards for a two users on a strategy\n      @param strategy the strategy to accrue a user's rewards on\n      @param user the first user to be accrued\n      @param user the second user to be accrued\n      @return the cumulative amount of rewards accrued to the first user (including prior)\n      @return the cumulative amount of rewards accrued to the second user (including prior)\n    */\n  function accrue(\n    ERC20 strategy,\n    address user,\n    address secondUser\n  ) public returns (uint256, uint256) {\n    (uint224 index, uint32 ts) = strategyState(strategy);\n    RewardsState memory state = RewardsState(index, ts);\n\n    if (state.index == 0) return (0, 0);\n\n    state = accrueStrategy(strategy, state);\n    return (accrueUser(strategy, user, state), accrueUser(strategy, secondUser, state));\n  }\n\n  /** \n      @notice claim rewards for a given user\n      @param user the user claiming rewards\n      @dev this function is public, and all rewards transfer to the user\n    */\n  function claimRewards(address user) external {\n    uint256 accrued = rewardsAccrued(user);\n\n    if (accrued != 0) {\n      _rewardsAccrued[user] = 0;\n\n      rewardToken.safeTransferFrom(address(flywheelRewards), user, accrued);\n\n      emit ClaimRewards(user, accrued);\n    }\n  }\n\n  /*----------------------------------------------------------------\n                          ADMIN LOGIC\n    ----------------------------------------------------------------*/\n\n  /** \n      @notice Emitted when a new strategy is added to flywheel by the admin\n      @param newStrategy the new added strategy\n    */\n  event AddStrategy(address indexed newStrategy);\n\n  /// @notice initialize a new strategy\n  function addStrategyForRewards(ERC20 strategy) external onlyOwner {\n    _addStrategyForRewards(strategy);\n  }\n\n  function _addStrategyForRewards(ERC20 strategy) internal {\n    (uint224 index, ) = strategyState(strategy);\n    require(index == 0, \"strategy\");\n    _strategyState[strategy] = RewardsState({\n      index: (10**rewardToken.decimals()).safeCastTo224(),\n      lastUpdatedTimestamp: block.timestamp.safeCastTo32()\n    });\n\n    allStrategies.push(strategy);\n    emit AddStrategy(address(strategy));\n  }\n\n  function getAllStrategies() external view returns (ERC20[] memory) {\n    return allStrategies;\n  }\n\n  /** \n      @notice Emitted when the rewards module changes\n      @param newFlywheelRewards the new rewards module\n    */\n  event FlywheelRewardsUpdate(address indexed newFlywheelRewards);\n\n  /// @notice swap out the flywheel rewards contract\n  function setFlywheelRewards(IFlywheelRewards newFlywheelRewards) external onlyOwner {\n    if (address(flywheelRewards) != address(0)) {\n      uint256 oldRewardBalance = rewardToken.balanceOf(address(flywheelRewards));\n      if (oldRewardBalance > 0) {\n        rewardToken.safeTransferFrom(address(flywheelRewards), address(newFlywheelRewards), oldRewardBalance);\n      }\n    }\n\n    flywheelRewards = newFlywheelRewards;\n\n    emit FlywheelRewardsUpdate(address(newFlywheelRewards));\n  }\n\n  /** \n      @notice Emitted when the booster module changes\n      @param newBooster the new booster module\n    */\n  event FlywheelBoosterUpdate(address indexed newBooster);\n\n  /// @notice swap out the flywheel booster contract\n  function setBooster(IFlywheelBooster newBooster) external onlyOwner {\n    flywheelBooster = newBooster;\n\n    emit FlywheelBoosterUpdate(address(newBooster));\n  }\n\n  event UpdatedFeeSettings(\n    uint256 oldPerformanceFee,\n    uint256 newPerformanceFee,\n    address oldFeeRecipient,\n    address newFeeRecipient\n  );\n\n  /**\n   * @notice Update performanceFee and/or feeRecipient\n   * @dev Claim rewards first from the previous feeRecipient before changing it\n   */\n  function updateFeeSettings(uint256 _performanceFee, address _feeRecipient) external onlyOwner {\n    _updateFeeSettings(_performanceFee, _feeRecipient);\n  }\n\n  function _updateFeeSettings(uint256 _performanceFee, address _feeRecipient) internal {\n    emit UpdatedFeeSettings(performanceFee, _performanceFee, feeRecipient, _feeRecipient);\n\n    if (feeRecipient != _feeRecipient) {\n      _rewardsAccrued[_feeRecipient] += rewardsAccrued(feeRecipient);\n      _rewardsAccrued[feeRecipient] = 0;\n    }\n    performanceFee = _performanceFee;\n    feeRecipient = _feeRecipient;\n  }\n\n  /*----------------------------------------------------------------\n                    INTERNAL ACCOUNTING LOGIC\n    ----------------------------------------------------------------*/\n\n  struct RewardsState {\n    /// @notice The strategy's last updated index\n    uint224 index;\n    /// @notice The timestamp the index was last updated at\n    uint32 lastUpdatedTimestamp;\n  }\n\n  /// @notice accumulate global rewards on a strategy\n  function accrueStrategy(ERC20 strategy, RewardsState memory state)\n    private\n    returns (RewardsState memory rewardsState)\n  {\n    // calculate accrued rewards through module\n    uint256 strategyRewardsAccrued = flywheelRewards.getAccruedRewards(strategy, state.lastUpdatedTimestamp);\n\n    rewardsState = state;\n\n    if (strategyRewardsAccrued > 0) {\n      // use the booster or token supply to calculate reward index denominator\n      uint256 supplyTokens = address(flywheelBooster) != address(0)\n        ? flywheelBooster.boostedTotalSupply(strategy)\n        : strategy.totalSupply();\n\n      // 100% = 100e16\n      uint256 accruedFees = (strategyRewardsAccrued * performanceFee) / uint224(100e16);\n\n      _rewardsAccrued[feeRecipient] += accruedFees;\n      strategyRewardsAccrued -= accruedFees;\n\n      uint224 deltaIndex;\n\n      if (supplyTokens != 0)\n        deltaIndex = ((strategyRewardsAccrued * (10**strategy.decimals())) / supplyTokens).safeCastTo224();\n\n      // accumulate rewards per token onto the index, multiplied by fixed-point factor\n      rewardsState = RewardsState({\n        index: state.index + deltaIndex,\n        lastUpdatedTimestamp: block.timestamp.safeCastTo32()\n      });\n      _strategyState[strategy] = rewardsState;\n    }\n  }\n\n  /// @notice accumulate rewards on a strategy for a specific user\n  function accrueUser(\n    ERC20 strategy,\n    address user,\n    RewardsState memory state\n  ) private returns (uint256) {\n    // load indices\n    uint224 strategyIndex = state.index;\n    uint224 supplierIndex = userIndex(strategy, user);\n\n    // sync user index to global\n    _userIndex[strategy][user] = strategyIndex;\n\n    // if user hasn't yet accrued rewards, grant them interest from the strategy beginning if they have a balance\n    // zero balances will have no effect other than syncing to global index\n    if (supplierIndex == 0) {\n      supplierIndex = (10**rewardToken.decimals()).safeCastTo224();\n    }\n\n    uint224 deltaIndex = strategyIndex - supplierIndex;\n    // use the booster or token balance to calculate reward balance multiplier\n    uint256 supplierTokens = address(flywheelBooster) != address(0)\n      ? flywheelBooster.boostedBalanceOf(strategy, user)\n      : strategy.balanceOf(user);\n\n    // accumulate rewards by multiplying user tokens by rewardsPerToken index and adding on unclaimed\n    uint256 supplierDelta = (deltaIndex * supplierTokens) / (10**strategy.decimals());\n    uint256 supplierAccrued = rewardsAccrued(user) + supplierDelta;\n\n    _rewardsAccrued[user] = supplierAccrued;\n\n    emit AccrueRewards(strategy, user, supplierDelta, strategyIndex);\n\n    return supplierAccrued;\n  }\n\n  function rewardsAccrued(address user) public virtual returns (uint256) {\n    return _rewardsAccrued[user];\n  }\n\n  function userIndex(ERC20 strategy, address user) public virtual returns (uint224) {\n    return _userIndex[strategy][user];\n  }\n\n  function strategyState(ERC20 strategy) public virtual returns (uint224 index, uint32 lastUpdatedTimestamp) {\n    return (_strategyState[strategy].index, _strategyState[strategy].lastUpdatedTimestamp);\n  }\n}\n"
    },
    "contracts/ionic/strategies/flywheel/IIonicFlywheel.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-only\npragma solidity ^0.8.10;\n\nimport { ERC20 } from \"solmate/tokens/ERC20.sol\";\n\ninterface IIonicFlywheel {\n  function isRewardsDistributor() external returns (bool);\n\n  function isFlywheel() external returns (bool);\n\n  function flywheelPreSupplierAction(address market, address supplier) external;\n\n  function flywheelPreBorrowerAction(address market, address borrower) external;\n\n  function flywheelPreTransferAction(\n    address market,\n    address src,\n    address dst\n  ) external;\n\n  function compAccrued(address user) external view returns (uint256);\n\n  function addMarketForRewards(ERC20 strategy) external;\n\n  function marketState(ERC20 strategy) external view returns (uint224 index, uint32 lastUpdatedTimestamp);\n}\n"
    },
    "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n */\ninterface IERC20PermitUpgradeable {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"
    },
    "lib/openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"
    },
    "lib/openzeppelin-contracts/contracts/utils/structs/EnumerableSet.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/structs/EnumerableSet.sol)\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for managing\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\n * types.\n *\n * Sets have the following properties:\n *\n * - Elements are added, removed, and checked for existence in constant time\n * (O(1)).\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\n *\n * ```\n * contract Example {\n *     // Add the library methods\n *     using EnumerableSet for EnumerableSet.AddressSet;\n *\n *     // Declare a set state variable\n *     EnumerableSet.AddressSet private mySet;\n * }\n * ```\n *\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\n * and `uint256` (`UintSet`) are supported.\n *\n * [WARNING]\n * ====\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\n * unusable.\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\n *\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\n * array of EnumerableSet.\n * ====\n */\nlibrary EnumerableSet {\n    // To implement this library for multiple types with as little code\n    // repetition as possible, we write it in terms of a generic Set type with\n    // bytes32 values.\n    // The Set implementation uses private functions, and user-facing\n    // implementations (such as AddressSet) are just wrappers around the\n    // underlying Set.\n    // This means that we can only create new EnumerableSets for types that fit\n    // in bytes32.\n\n    struct Set {\n        // Storage of set values\n        bytes32[] _values;\n        // Position of the value in the `values` array, plus 1 because index 0\n        // means a value is not in the set.\n        mapping(bytes32 => uint256) _indexes;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function _add(Set storage set, bytes32 value) private returns (bool) {\n        if (!_contains(set, value)) {\n            set._values.push(value);\n            // The value is stored at length-1, but we add 1 to all indexes\n            // and use 0 as a sentinel value\n            set._indexes[value] = set._values.length;\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\n        // We read and store the value's index to prevent multiple reads from the same storage slot\n        uint256 valueIndex = set._indexes[value];\n\n        if (valueIndex != 0) {\n            // Equivalent to contains(set, value)\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\n            // This modifies the order of the array, as noted in {at}.\n\n            uint256 toDeleteIndex = valueIndex - 1;\n            uint256 lastIndex = set._values.length - 1;\n\n            if (lastIndex != toDeleteIndex) {\n                bytes32 lastValue = set._values[lastIndex];\n\n                // Move the last value to the index where the value to delete is\n                set._values[toDeleteIndex] = lastValue;\n                // Update the index for the moved value\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\n            }\n\n            // Delete the slot where the moved value was stored\n            set._values.pop();\n\n            // Delete the index for the deleted slot\n            delete set._indexes[value];\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\n        return set._indexes[value] != 0;\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function _length(Set storage set) private view returns (uint256) {\n        return set._values.length;\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\n        return set._values[index];\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function _values(Set storage set) private view returns (bytes32[] memory) {\n        return set._values;\n    }\n\n    // Bytes32Set\n\n    struct Bytes32Set {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _add(set._inner, value);\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _remove(set._inner, value);\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\n        return _contains(set._inner, value);\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(Bytes32Set storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\n        return _at(set._inner, index);\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        bytes32[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n\n    // AddressSet\n\n    struct AddressSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(AddressSet storage set, address value) internal returns (bool) {\n        return _add(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(AddressSet storage set, address value) internal returns (bool) {\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(AddressSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\n        return address(uint160(uint256(_at(set._inner, index))));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(AddressSet storage set) internal view returns (address[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        address[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n\n    // UintSet\n\n    struct UintSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\n        return _add(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\n        return _remove(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(UintSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\n        return uint256(_at(set._inner, index));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        uint256[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n}\n"
    },
    "contracts/ionic/AuthoritiesRegistry.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity >=0.8.0;\n\nimport { PoolRolesAuthority } from \"../ionic/PoolRolesAuthority.sol\";\nimport { SafeOwnableUpgradeable } from \"../ionic/SafeOwnableUpgradeable.sol\";\nimport { IonicComptroller } from \"../compound/ComptrollerInterface.sol\";\n\nimport { TransparentUpgradeableProxy } from \"@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol\";\n\ncontract AuthoritiesRegistry is SafeOwnableUpgradeable {\n  mapping(address => PoolRolesAuthority) public poolsAuthorities;\n  PoolRolesAuthority public poolAuthLogic;\n  address public leveredPositionsFactory;\n  bool public noAuthRequired;\n\n  function initialize(address _leveredPositionsFactory) public initializer {\n    __SafeOwnable_init(msg.sender);\n    leveredPositionsFactory = _leveredPositionsFactory;\n    poolAuthLogic = new PoolRolesAuthority();\n  }\n\n  function reinitialize(address _leveredPositionsFactory) public onlyOwnerOrAdmin {\n    leveredPositionsFactory = _leveredPositionsFactory;\n    poolAuthLogic = new PoolRolesAuthority();\n    // for Neon the auth is not required\n    noAuthRequired = block.chainid == 245022934;\n  }\n\n  function createPoolAuthority(address pool) public onlyOwner returns (PoolRolesAuthority auth) {\n    require(address(poolsAuthorities[pool]) == address(0), \"already created\");\n\n    TransparentUpgradeableProxy proxy = new TransparentUpgradeableProxy(address(poolAuthLogic), _getProxyAdmin(), \"\");\n    auth = PoolRolesAuthority(address(proxy));\n    auth.initialize(address(this));\n    poolsAuthorities[pool] = auth;\n\n    auth.openPoolSupplierCapabilities(IonicComptroller(pool));\n    auth.setUserRole(address(this), auth.REGISTRY_ROLE(), true);\n    // sets the registry owner as the auth owner\n    reconfigureAuthority(pool);\n  }\n\n  function reconfigureAuthority(address poolAddress) public {\n    IonicComptroller pool = IonicComptroller(poolAddress);\n    PoolRolesAuthority auth = poolsAuthorities[address(pool)];\n\n    if (msg.sender != poolAddress || address(auth) != address(0)) {\n      require(address(auth) != address(0), \"no such authority\");\n      require(msg.sender == owner() || msg.sender == poolAddress, \"not owner or pool\");\n\n      auth.configureRegistryCapabilities();\n      auth.configurePoolSupplierCapabilities(pool);\n      auth.configurePoolBorrowerCapabilities(pool);\n      // everyone can be a liquidator\n      auth.configureOpenPoolLiquidatorCapabilities(pool);\n      auth.configureLeveredPositionCapabilities(pool);\n\n      if (auth.owner() != owner()) {\n        auth.setOwner(owner());\n      }\n    }\n  }\n\n  function canCall(\n    address pool,\n    address user,\n    address target,\n    bytes4 functionSig\n  ) external view returns (bool) {\n    PoolRolesAuthority authorityForPool = poolsAuthorities[pool];\n    if (address(authorityForPool) == address(0)) {\n      return noAuthRequired;\n    } else {\n      // allow only if an auth exists and it allows the action\n      return authorityForPool.canCall(user, target, functionSig);\n    }\n  }\n\n  function setUserRole(\n    address pool,\n    address user,\n    uint8 role,\n    bool enabled\n  ) external {\n    PoolRolesAuthority poolAuth = poolsAuthorities[pool];\n\n    require(address(poolAuth) != address(0), \"auth does not exist\");\n    require(msg.sender == owner() || msg.sender == leveredPositionsFactory, \"not owner or factory\");\n    require(msg.sender != leveredPositionsFactory || role == poolAuth.LEVERED_POSITION_ROLE(), \"only lev pos role\");\n\n    poolAuth.setUserRole(user, role, enabled);\n  }\n}\n"
    },
    "lib/solmate/src/utils/SafeTransferLib.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-only\npragma solidity >=0.8.0;\n\nimport {ERC20} from \"../tokens/ERC20.sol\";\n\n/// @notice Safe ETH and ERC20 transfer library that gracefully handles missing return values.\n/// @author Solmate (https://github.com/transmissions11/solmate/blob/main/src/utils/SafeTransferLib.sol)\n/// @dev Use with caution! Some functions in this library knowingly create dirty bits at the destination of the free memory pointer.\n/// @dev Note that none of the functions in this library check that a token has code at all! That responsibility is delegated to the caller.\nlibrary SafeTransferLib {\n    /*//////////////////////////////////////////////////////////////\n                             ETH OPERATIONS\n    //////////////////////////////////////////////////////////////*/\n\n    function safeTransferETH(address to, uint256 amount) internal {\n        bool success;\n\n        assembly {\n            // Transfer the ETH and store if it succeeded or not.\n            success := call(gas(), to, amount, 0, 0, 0, 0)\n        }\n\n        require(success, \"ETH_TRANSFER_FAILED\");\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                            ERC20 OPERATIONS\n    //////////////////////////////////////////////////////////////*/\n\n    function safeTransferFrom(\n        ERC20 token,\n        address from,\n        address to,\n        uint256 amount\n    ) internal {\n        bool success;\n\n        assembly {\n            // Get a pointer to some free memory.\n            let freeMemoryPointer := mload(0x40)\n\n            // Write the abi-encoded calldata into memory, beginning with the function selector.\n            mstore(freeMemoryPointer, 0x23b872dd00000000000000000000000000000000000000000000000000000000)\n            mstore(add(freeMemoryPointer, 4), from) // Append the \"from\" argument.\n            mstore(add(freeMemoryPointer, 36), to) // Append the \"to\" argument.\n            mstore(add(freeMemoryPointer, 68), amount) // Append the \"amount\" argument.\n\n            success := and(\n                // Set success to whether the call reverted, if not we check it either\n                // returned exactly 1 (can't just be non-zero data), or had no return data.\n                or(and(eq(mload(0), 1), gt(returndatasize(), 31)), iszero(returndatasize())),\n                // We use 100 because the length of our calldata totals up like so: 4 + 32 * 3.\n                // We use 0 and 32 to copy up to 32 bytes of return data into the scratch space.\n                // Counterintuitively, this call must be positioned second to the or() call in the\n                // surrounding and() call or else returndatasize() will be zero during the computation.\n                call(gas(), token, 0, freeMemoryPointer, 100, 0, 32)\n            )\n        }\n\n        require(success, \"TRANSFER_FROM_FAILED\");\n    }\n\n    function safeTransfer(\n        ERC20 token,\n        address to,\n        uint256 amount\n    ) internal {\n        bool success;\n\n        assembly {\n            // Get a pointer to some free memory.\n            let freeMemoryPointer := mload(0x40)\n\n            // Write the abi-encoded calldata into memory, beginning with the function selector.\n            mstore(freeMemoryPointer, 0xa9059cbb00000000000000000000000000000000000000000000000000000000)\n            mstore(add(freeMemoryPointer, 4), to) // Append the \"to\" argument.\n            mstore(add(freeMemoryPointer, 36), amount) // Append the \"amount\" argument.\n\n            success := and(\n                // Set success to whether the call reverted, if not we check it either\n                // returned exactly 1 (can't just be non-zero data), or had no return data.\n                or(and(eq(mload(0), 1), gt(returndatasize(), 31)), iszero(returndatasize())),\n                // We use 68 because the length of our calldata totals up like so: 4 + 32 * 2.\n                // We use 0 and 32 to copy up to 32 bytes of return data into the scratch space.\n                // Counterintuitively, this call must be positioned second to the or() call in the\n                // surrounding and() call or else returndatasize() will be zero during the computation.\n                call(gas(), token, 0, freeMemoryPointer, 68, 0, 32)\n            )\n        }\n\n        require(success, \"TRANSFER_FAILED\");\n    }\n\n    function safeApprove(\n        ERC20 token,\n        address to,\n        uint256 amount\n    ) internal {\n        bool success;\n\n        assembly {\n            // Get a pointer to some free memory.\n            let freeMemoryPointer := mload(0x40)\n\n            // Write the abi-encoded calldata into memory, beginning with the function selector.\n            mstore(freeMemoryPointer, 0x095ea7b300000000000000000000000000000000000000000000000000000000)\n            mstore(add(freeMemoryPointer, 4), to) // Append the \"to\" argument.\n            mstore(add(freeMemoryPointer, 36), amount) // Append the \"amount\" argument.\n\n            success := and(\n                // Set success to whether the call reverted, if not we check it either\n                // returned exactly 1 (can't just be non-zero data), or had no return data.\n                or(and(eq(mload(0), 1), gt(returndatasize(), 31)), iszero(returndatasize())),\n                // We use 68 because the length of our calldata totals up like so: 4 + 32 * 2.\n                // We use 0 and 32 to copy up to 32 bytes of return data into the scratch space.\n                // Counterintuitively, this call must be positioned second to the or() call in the\n                // surrounding and() call or else returndatasize() will be zero during the computation.\n                call(gas(), token, 0, freeMemoryPointer, 68, 0, 32)\n            )\n        }\n\n        require(success, \"APPROVE_FAILED\");\n    }\n}\n"
    },
    "lib/solmate/src/utils/SafeCastLib.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-only\npragma solidity >=0.8.0;\n\n/// @notice Safe unsigned integer casting library that reverts on overflow.\n/// @author Solmate (https://github.com/transmissions11/solmate/blob/main/src/utils/SafeCastLib.sol)\n/// @author Modified from OpenZeppelin (https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/math/SafeCast.sol)\nlibrary SafeCastLib {\n    function safeCastTo248(uint256 x) internal pure returns (uint248 y) {\n        require(x < 1 << 248);\n\n        y = uint248(x);\n    }\n\n    function safeCastTo224(uint256 x) internal pure returns (uint224 y) {\n        require(x < 1 << 224);\n\n        y = uint224(x);\n    }\n\n    function safeCastTo192(uint256 x) internal pure returns (uint192 y) {\n        require(x < 1 << 192);\n\n        y = uint192(x);\n    }\n\n    function safeCastTo160(uint256 x) internal pure returns (uint160 y) {\n        require(x < 1 << 160);\n\n        y = uint160(x);\n    }\n\n    function safeCastTo128(uint256 x) internal pure returns (uint128 y) {\n        require(x < 1 << 128);\n\n        y = uint128(x);\n    }\n\n    function safeCastTo96(uint256 x) internal pure returns (uint96 y) {\n        require(x < 1 << 96);\n\n        y = uint96(x);\n    }\n\n    function safeCastTo64(uint256 x) internal pure returns (uint64 y) {\n        require(x < 1 << 64);\n\n        y = uint64(x);\n    }\n\n    function safeCastTo32(uint256 x) internal pure returns (uint32 y) {\n        require(x < 1 << 32);\n\n        y = uint32(x);\n    }\n\n    function safeCastTo24(uint256 x) internal pure returns (uint24 y) {\n        require(x < 1 << 24);\n\n        y = uint24(x);\n    }\n\n    function safeCastTo16(uint256 x) internal pure returns (uint16 y) {\n        require(x < 1 << 16);\n\n        y = uint16(x);\n    }\n\n    function safeCastTo8(uint256 x) internal pure returns (uint8 y) {\n        require(x < 1 << 8);\n\n        y = uint8(x);\n    }\n}\n"
    },
    "lib/flywheel-v2/src/interfaces/IFlywheelRewards.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-only\npragma solidity ^0.8.10;\n\nimport {ERC20} from \"solmate/tokens/ERC20.sol\";\nimport {FlywheelCore} from \"../FlywheelCore.sol\";\n\n/**\n @title Rewards Module for Flywheel\n @notice Flywheel is a general framework for managing token incentives.\n         It takes reward streams to various *strategies* such as staking LP tokens and divides them among *users* of those strategies.\n\n         The Rewards module is responsible for:\n         * determining the ongoing reward amounts to entire strategies (core handles the logic for dividing among users)\n         * actually holding rewards that are yet to be claimed\n\n         The reward stream can follow arbitrary logic as long as the amount of rewards passed to flywheel core has been sent to this contract.\n\n         Different module strategies include:\n         * a static reward rate per second\n         * a decaying reward rate\n         * a dynamic just-in-time reward stream\n         * liquid governance reward delegation (Curve Gauge style)\n\n         SECURITY NOTE: The rewards strategy should be smooth and continuous, to prevent gaming the reward distribution by frontrunning.\n */\ninterface IFlywheelRewards {\n    /**\n     @notice calculate the rewards amount accrued to a strategy since the last update.\n     @param strategy the strategy to accrue rewards for.\n     @param lastUpdatedTimestamp the last time rewards were accrued for the strategy.\n     @return rewards the amount of rewards accrued to the market\n    */\n    function getAccruedRewards(ERC20 strategy, uint32 lastUpdatedTimestamp) external returns (uint256 rewards);\n\n    /// @notice return the flywheel core address\n    function flywheel() external view returns (FlywheelCore);\n\n    /// @notice return the reward token associated with flywheel core.\n    function rewardToken() external view returns (ERC20);\n}\n"
    },
    "lib/flywheel-v2/src/interfaces/IFlywheelBooster.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-only\npragma solidity ^0.8.10;\n\nimport {ERC20} from \"solmate/tokens/ERC20.sol\";\n\n/**\n @title Balance Booster Module for Flywheel\n @notice Flywheel is a general framework for managing token incentives.\n         It takes reward streams to various *strategies* such as staking LP tokens and divides them among *users* of those strategies.\n\n         The Booster module is an optional module for virtually boosting or otherwise transforming user balances. \n         If a booster is not configured, the strategies ERC-20 balanceOf/totalSupply will be used instead.\n        \n         Boosting logic can be associated with referrals, vote-escrow, or other strategies.\n\n         SECURITY NOTE: similar to how Core needs to be notified any time the strategy user composition changes, the booster would need to be notified of any conditions which change the boosted balances atomically.\n         This prevents gaming of the reward calculation function by using manipulated balances when accruing.\n*/\ninterface IFlywheelBooster {\n    /**\n      @notice calculate the boosted supply of a strategy.\n      @param strategy the strategy to calculate boosted supply of\n      @return the boosted supply\n     */\n    function boostedTotalSupply(ERC20 strategy) external view returns (uint256);\n\n    /**\n      @notice calculate the boosted balance of a user in a given strategy.\n      @param strategy the strategy to calculate boosted balance of\n      @param user the user to calculate boosted balance of\n      @return the boosted balance\n     */\n    function boostedBalanceOf(ERC20 strategy, address user) external view returns (uint256);\n}\n"
    },
    "contracts/ionic/SafeOwnableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity >=0.8.0;\n\nimport \"openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol\";\n\n/**\n * @dev Ownable extension that requires a two-step process of setting the pending owner and the owner accepting it.\n * @notice Existing OwnableUpgradeable contracts cannot be upgraded due to the extra storage variable\n * that will shift the other.\n */\nabstract contract SafeOwnableUpgradeable is OwnableUpgradeable {\n  /**\n   * @notice Pending owner of this contract\n   */\n  address public pendingOwner;\n\n  function __SafeOwnable_init(address owner_) internal onlyInitializing {\n    __Ownable_init();\n    _transferOwnership(owner_);\n  }\n\n  struct AddressSlot {\n    address value;\n  }\n\n  modifier onlyOwnerOrAdmin() {\n    bool isOwner = owner() == _msgSender();\n    if (!isOwner) {\n      address admin = _getProxyAdmin();\n      bool isAdmin = admin == _msgSender();\n      require(isAdmin, \"Ownable: caller is neither the owner nor the admin\");\n    }\n    _;\n  }\n\n  /**\n   * @notice Emitted when pendingOwner is changed\n   */\n  event NewPendingOwner(address oldPendingOwner, address newPendingOwner);\n\n  /**\n   * @notice Emitted when pendingOwner is accepted, which means owner is updated\n   */\n  event NewOwner(address oldOwner, address newOwner);\n\n  /**\n   * @notice Begins transfer of owner rights. The newPendingOwner must call `_acceptOwner` to finalize the transfer.\n   * @dev Owner function to begin change of owner. The newPendingOwner must call `_acceptOwner` to finalize the transfer.\n   * @param newPendingOwner New pending owner.\n   */\n  function _setPendingOwner(address newPendingOwner) public onlyOwner {\n    // Save current value, if any, for inclusion in log\n    address oldPendingOwner = pendingOwner;\n\n    // Store pendingOwner with value newPendingOwner\n    pendingOwner = newPendingOwner;\n\n    // Emit NewPendingOwner(oldPendingOwner, newPendingOwner)\n    emit NewPendingOwner(oldPendingOwner, newPendingOwner);\n  }\n\n  /**\n   * @notice Accepts transfer of owner rights. msg.sender must be pendingOwner\n   * @dev Owner function for pending owner to accept role and update owner\n   */\n  function _acceptOwner() public {\n    // Check caller is pendingOwner and pendingOwner ≠ address(0)\n    require(msg.sender == pendingOwner, \"not the pending owner\");\n\n    // Save current values for inclusion in log\n    address oldOwner = owner();\n    address oldPendingOwner = pendingOwner;\n\n    // Store owner with value pendingOwner\n    _transferOwnership(pendingOwner);\n\n    // Clear the pending value\n    pendingOwner = address(0);\n\n    emit NewOwner(oldOwner, pendingOwner);\n    emit NewPendingOwner(oldPendingOwner, pendingOwner);\n  }\n\n  function renounceOwnership() public override onlyOwner {\n    // do not remove this overriding fn\n    revert(\"not used anymore\");\n  }\n\n  function transferOwnership(address newOwner) public override onlyOwner {\n    emit NewPendingOwner(pendingOwner, newOwner);\n    pendingOwner = newOwner;\n  }\n\n  function _getProxyAdmin() internal view returns (address admin) {\n    bytes32 _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\n    AddressSlot storage adminSlot;\n    assembly {\n      adminSlot.slot := _ADMIN_SLOT\n    }\n    admin = adminSlot.value;\n  }\n}\n"
    },
    "contracts/ionic/PoolRolesAuthority.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity >=0.8.0;\n\nimport { IonicComptroller, ComptrollerInterface } from \"../compound/ComptrollerInterface.sol\";\nimport { ICErc20, CTokenSecondExtensionInterface, CTokenFirstExtensionInterface } from \"../compound/CTokenInterfaces.sol\";\n\nimport { RolesAuthority, Authority } from \"solmate/auth/authorities/RolesAuthority.sol\";\n\nimport \"openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol\";\n\ncontract PoolRolesAuthority is RolesAuthority, Initializable {\n  constructor() RolesAuthority(address(0), Authority(address(0))) {\n    _disableInitializers();\n  }\n\n  function initialize(address _owner) public initializer {\n    owner = _owner;\n    authority = this;\n  }\n\n  // up to 256 roles\n  uint8 public constant REGISTRY_ROLE = 0;\n  uint8 public constant SUPPLIER_ROLE = 1;\n  uint8 public constant BORROWER_ROLE = 2;\n  uint8 public constant LIQUIDATOR_ROLE = 3;\n  uint8 public constant LEVERED_POSITION_ROLE = 4;\n\n  function configureRegistryCapabilities() external requiresAuth {\n    setRoleCapability(REGISTRY_ROLE, address(this), PoolRolesAuthority.configureRegistryCapabilities.selector, true);\n    setRoleCapability(\n      REGISTRY_ROLE,\n      address(this),\n      PoolRolesAuthority.configurePoolSupplierCapabilities.selector,\n      true\n    );\n    setRoleCapability(\n      REGISTRY_ROLE,\n      address(this),\n      PoolRolesAuthority.configurePoolBorrowerCapabilities.selector,\n      true\n    );\n    setRoleCapability(\n      REGISTRY_ROLE,\n      address(this),\n      PoolRolesAuthority.configureClosedPoolLiquidatorCapabilities.selector,\n      true\n    );\n    setRoleCapability(\n      REGISTRY_ROLE,\n      address(this),\n      PoolRolesAuthority.configureOpenPoolLiquidatorCapabilities.selector,\n      true\n    );\n    setRoleCapability(\n      REGISTRY_ROLE,\n      address(this),\n      PoolRolesAuthority.configureLeveredPositionCapabilities.selector,\n      true\n    );\n    setRoleCapability(REGISTRY_ROLE, address(this), RolesAuthority.setUserRole.selector, true);\n  }\n\n  function openPoolSupplierCapabilities(IonicComptroller pool) external requiresAuth {\n    _setPublicPoolSupplierCapabilities(pool, true);\n  }\n\n  function closePoolSupplierCapabilities(IonicComptroller pool) external requiresAuth {\n    _setPublicPoolSupplierCapabilities(pool, false);\n  }\n\n  function _setPublicPoolSupplierCapabilities(IonicComptroller pool, bool setPublic) internal {\n    setPublicCapability(address(pool), pool.enterMarkets.selector, setPublic);\n    setPublicCapability(address(pool), pool.exitMarket.selector, setPublic);\n    ICErc20[] memory allMarkets = pool.getAllMarkets();\n    for (uint256 i = 0; i < allMarkets.length; i++) {\n      bytes4[] memory selectors = getSupplierMarketSelectors();\n      for (uint256 j = 0; j < selectors.length; j++) {\n        setPublicCapability(address(allMarkets[i]), selectors[j], setPublic);\n      }\n    }\n  }\n\n  function configurePoolSupplierCapabilities(IonicComptroller pool) external requiresAuth {\n    _configurePoolSupplierCapabilities(pool, SUPPLIER_ROLE);\n  }\n\n  function getSupplierMarketSelectors() internal pure returns (bytes4[] memory selectors) {\n    uint8 fnsCount = 6;\n    selectors = new bytes4[](fnsCount);\n    selectors[--fnsCount] = CTokenSecondExtensionInterface.mint.selector;\n    selectors[--fnsCount] = CTokenSecondExtensionInterface.redeem.selector;\n    selectors[--fnsCount] = CTokenSecondExtensionInterface.redeemUnderlying.selector;\n    selectors[--fnsCount] = CTokenFirstExtensionInterface.transfer.selector;\n    selectors[--fnsCount] = CTokenFirstExtensionInterface.transferFrom.selector;\n    selectors[--fnsCount] = CTokenFirstExtensionInterface.approve.selector;\n\n    require(fnsCount == 0, \"use the correct array length\");\n    return selectors;\n  }\n\n  function _configurePoolSupplierCapabilities(IonicComptroller pool, uint8 role) internal {\n    setRoleCapability(role, address(pool), pool.enterMarkets.selector, true);\n    setRoleCapability(role, address(pool), pool.exitMarket.selector, true);\n    ICErc20[] memory allMarkets = pool.getAllMarkets();\n    for (uint256 i = 0; i < allMarkets.length; i++) {\n      bytes4[] memory selectors = getSupplierMarketSelectors();\n      for (uint256 j = 0; j < selectors.length; j++) {\n        setRoleCapability(role, address(allMarkets[i]), selectors[j], true);\n      }\n    }\n  }\n\n  function openPoolBorrowerCapabilities(IonicComptroller pool) external requiresAuth {\n    _setPublicPoolBorrowerCapabilities(pool, true);\n  }\n\n  function closePoolBorrowerCapabilities(IonicComptroller pool) external requiresAuth {\n    _setPublicPoolBorrowerCapabilities(pool, false);\n  }\n\n  function _setPublicPoolBorrowerCapabilities(IonicComptroller pool, bool setPublic) internal {\n    ICErc20[] memory allMarkets = pool.getAllMarkets();\n    for (uint256 i = 0; i < allMarkets.length; i++) {\n      setPublicCapability(address(allMarkets[i]), allMarkets[i].borrow.selector, setPublic);\n      setPublicCapability(address(allMarkets[i]), allMarkets[i].repayBorrow.selector, setPublic);\n      setPublicCapability(address(allMarkets[i]), allMarkets[i].repayBorrowBehalf.selector, setPublic);\n      setPublicCapability(address(allMarkets[i]), allMarkets[i].flash.selector, setPublic);\n    }\n  }\n\n  function configurePoolBorrowerCapabilities(IonicComptroller pool) external requiresAuth {\n    // borrowers have the SUPPLIER_ROLE capabilities by default\n    _configurePoolSupplierCapabilities(pool, BORROWER_ROLE);\n    ICErc20[] memory allMarkets = pool.getAllMarkets();\n    for (uint256 i = 0; i < allMarkets.length; i++) {\n      setRoleCapability(BORROWER_ROLE, address(allMarkets[i]), allMarkets[i].borrow.selector, true);\n      setRoleCapability(BORROWER_ROLE, address(allMarkets[i]), allMarkets[i].repayBorrow.selector, true);\n      setRoleCapability(BORROWER_ROLE, address(allMarkets[i]), allMarkets[i].repayBorrowBehalf.selector, true);\n      setRoleCapability(BORROWER_ROLE, address(allMarkets[i]), allMarkets[i].flash.selector, true);\n    }\n  }\n\n  function configureClosedPoolLiquidatorCapabilities(IonicComptroller pool) external requiresAuth {\n    ICErc20[] memory allMarkets = pool.getAllMarkets();\n    for (uint256 i = 0; i < allMarkets.length; i++) {\n      setPublicCapability(address(allMarkets[i]), allMarkets[i].liquidateBorrow.selector, false);\n      setRoleCapability(LIQUIDATOR_ROLE, address(allMarkets[i]), allMarkets[i].liquidateBorrow.selector, true);\n      setRoleCapability(LIQUIDATOR_ROLE, address(allMarkets[i]), allMarkets[i].redeem.selector, true);\n    }\n  }\n\n  function configureOpenPoolLiquidatorCapabilities(IonicComptroller pool) external requiresAuth {\n    ICErc20[] memory allMarkets = pool.getAllMarkets();\n    for (uint256 i = 0; i < allMarkets.length; i++) {\n      setPublicCapability(address(allMarkets[i]), allMarkets[i].liquidateBorrow.selector, true);\n      // TODO this leaves redeeming open for everyone\n      setPublicCapability(address(allMarkets[i]), allMarkets[i].redeem.selector, true);\n    }\n  }\n\n  function configureLeveredPositionCapabilities(IonicComptroller pool) external requiresAuth {\n    setRoleCapability(LEVERED_POSITION_ROLE, address(pool), pool.enterMarkets.selector, true);\n    setRoleCapability(LEVERED_POSITION_ROLE, address(pool), pool.exitMarket.selector, true);\n    ICErc20[] memory allMarkets = pool.getAllMarkets();\n    for (uint256 i = 0; i < allMarkets.length; i++) {\n      setRoleCapability(LEVERED_POSITION_ROLE, address(allMarkets[i]), allMarkets[i].mint.selector, true);\n      setRoleCapability(LEVERED_POSITION_ROLE, address(allMarkets[i]), allMarkets[i].redeem.selector, true);\n      setRoleCapability(LEVERED_POSITION_ROLE, address(allMarkets[i]), allMarkets[i].redeemUnderlying.selector, true);\n\n      setRoleCapability(LEVERED_POSITION_ROLE, address(allMarkets[i]), allMarkets[i].borrow.selector, true);\n      setRoleCapability(LEVERED_POSITION_ROLE, address(allMarkets[i]), allMarkets[i].repayBorrow.selector, true);\n      setRoleCapability(LEVERED_POSITION_ROLE, address(allMarkets[i]), allMarkets[i].flash.selector, true);\n    }\n  }\n}\n"
    },
    "lib/openzeppelin-contracts/contracts/proxy/transparent/TransparentUpgradeableProxy.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/transparent/TransparentUpgradeableProxy.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../ERC1967/ERC1967Proxy.sol\";\n\n/**\n * @dev This contract implements a proxy that is upgradeable by an admin.\n *\n * To avoid https://medium.com/nomic-labs-blog/malicious-backdoors-in-ethereum-proxies-62629adf3357[proxy selector\n * clashing], which can potentially be used in an attack, this contract uses the\n * https://blog.openzeppelin.com/the-transparent-proxy-pattern/[transparent proxy pattern]. This pattern implies two\n * things that go hand in hand:\n *\n * 1. If any account other than the admin calls the proxy, the call will be forwarded to the implementation, even if\n * that call matches one of the admin functions exposed by the proxy itself.\n * 2. If the admin calls the proxy, it can access the admin functions, but its calls will never be forwarded to the\n * implementation. If the admin tries to call a function on the implementation it will fail with an error that says\n * \"admin cannot fallback to proxy target\".\n *\n * These properties mean that the admin account can only be used for admin actions like upgrading the proxy or changing\n * the admin, so it's best if it's a dedicated account that is not used for anything else. This will avoid headaches due\n * to sudden errors when trying to call a function from the proxy implementation.\n *\n * Our recommendation is for the dedicated account to be an instance of the {ProxyAdmin} contract. If set up this way,\n * you should think of the `ProxyAdmin` instance as the real administrative interface of your proxy.\n */\ncontract TransparentUpgradeableProxy is ERC1967Proxy {\n    /**\n     * @dev Initializes an upgradeable proxy managed by `_admin`, backed by the implementation at `_logic`, and\n     * optionally initialized with `_data` as explained in {ERC1967Proxy-constructor}.\n     */\n    constructor(\n        address _logic,\n        address admin_,\n        bytes memory _data\n    ) payable ERC1967Proxy(_logic, _data) {\n        _changeAdmin(admin_);\n    }\n\n    /**\n     * @dev Modifier used internally that will delegate the call to the implementation unless the sender is the admin.\n     */\n    modifier ifAdmin() {\n        if (msg.sender == _getAdmin()) {\n            _;\n        } else {\n            _fallback();\n        }\n    }\n\n    /**\n     * @dev Returns the current admin.\n     *\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-getProxyAdmin}.\n     *\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using the\n     * https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\n     * `0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103`\n     */\n    function admin() external ifAdmin returns (address admin_) {\n        admin_ = _getAdmin();\n    }\n\n    /**\n     * @dev Returns the current implementation.\n     *\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-getProxyImplementation}.\n     *\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using the\n     * https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\n     * `0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc`\n     */\n    function implementation() external ifAdmin returns (address implementation_) {\n        implementation_ = _implementation();\n    }\n\n    /**\n     * @dev Changes the admin of the proxy.\n     *\n     * Emits an {AdminChanged} event.\n     *\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-changeProxyAdmin}.\n     */\n    function changeAdmin(address newAdmin) external virtual ifAdmin {\n        _changeAdmin(newAdmin);\n    }\n\n    /**\n     * @dev Upgrade the implementation of the proxy.\n     *\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-upgrade}.\n     */\n    function upgradeTo(address newImplementation) external ifAdmin {\n        _upgradeToAndCall(newImplementation, bytes(\"\"), false);\n    }\n\n    /**\n     * @dev Upgrade the implementation of the proxy, and then call a function from the new implementation as specified\n     * by `data`, which should be an encoded function call. This is useful to initialize new storage variables in the\n     * proxied contract.\n     *\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-upgradeAndCall}.\n     */\n    function upgradeToAndCall(address newImplementation, bytes calldata data) external payable ifAdmin {\n        _upgradeToAndCall(newImplementation, data, true);\n    }\n\n    /**\n     * @dev Returns the current admin.\n     */\n    function _admin() internal view virtual returns (address) {\n        return _getAdmin();\n    }\n\n    /**\n     * @dev Makes sure the admin cannot access the fallback function. See {Proxy-_beforeFallback}.\n     */\n    function _beforeFallback() internal virtual override {\n        require(msg.sender != _getAdmin(), \"TransparentUpgradeableProxy: admin cannot fallback to proxy target\");\n        super._beforeFallback();\n    }\n}\n"
    },
    "lib/flywheel-v2/src/FlywheelCore.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-only\npragma solidity ^0.8.10;\n\nimport {ERC20} from \"solmate/tokens/ERC20.sol\";\nimport {Auth, Authority} from \"solmate/auth/Auth.sol\";\nimport {SafeTransferLib} from \"solmate/utils/SafeTransferLib.sol\";\nimport {SafeCastLib} from \"solmate/utils/SafeCastLib.sol\";\n\nimport {IFlywheelRewards} from \"./interfaces/IFlywheelRewards.sol\";\nimport {IFlywheelBooster} from \"./interfaces/IFlywheelBooster.sol\";\n\n/**\n @title Flywheel Core Incentives Manager\n @notice Flywheel is a general framework for managing token incentives.\n         It takes reward streams to various *strategies* such as staking LP tokens and divides them among *users* of those strategies.\n\n         The Core contract maintaings three important pieces of state:\n         * the rewards index which determines how many rewards are owed per token per strategy. User indexes track how far behind the strategy they are to lazily calculate all catch-up rewards.\n         * the accrued (unclaimed) rewards per user.\n         * references to the booster and rewards module described below.\n\n         Core does not manage any tokens directly. The rewards module maintains token balances, and approves core to pull transfer them to users when they claim.\n\n         SECURITY NOTE: For maximum accuracy and to avoid exploits, rewards accrual should be notified atomically through the accrue hook. \n         Accrue should be called any time tokens are transferred, minted, or burned.\n */\ncontract FlywheelCore is Auth {\n    using SafeTransferLib for ERC20;\n    using SafeCastLib for uint256;\n\n    /// @notice The token to reward\n    ERC20 public immutable rewardToken;\n\n    /// @notice append-only list of strategies added\n    ERC20[] public allStrategies;\n\n    /// @notice the rewards contract for managing streams\n    IFlywheelRewards public flywheelRewards;\n\n    /// @notice optional booster module for calculating virtual balances on strategies\n    IFlywheelBooster public flywheelBooster;\n\n    constructor(\n        ERC20 _rewardToken,\n        IFlywheelRewards _flywheelRewards,\n        IFlywheelBooster _flywheelBooster,\n        address _owner,\n        Authority _authority\n    ) Auth(_owner, _authority) {\n        rewardToken = _rewardToken;\n        flywheelRewards = _flywheelRewards;\n        flywheelBooster = _flywheelBooster;\n    }\n\n    /*///////////////////////////////////////////////////////////////\n                        ACCRUE/CLAIM LOGIC\n    //////////////////////////////////////////////////////////////*/\n\n    /** \n      @notice Emitted when a user's rewards accrue to a given strategy.\n      @param strategy the updated rewards strategy\n      @param user the user of the rewards\n      @param rewardsDelta how many new rewards accrued to the user\n      @param rewardsIndex the market index for rewards per token accrued\n    */\n    event AccrueRewards(ERC20 indexed strategy, address indexed user, uint256 rewardsDelta, uint256 rewardsIndex);\n\n    /** \n      @notice Emitted when a user claims accrued rewards.\n      @param user the user of the rewards\n      @param amount the amount of rewards claimed\n    */\n    event ClaimRewards(address indexed user, uint256 amount);\n\n    /// @notice The accrued but not yet transferred rewards for each user\n    mapping(address => uint256) public rewardsAccrued;\n\n    /** \n      @notice accrue rewards for a single user on a strategy\n      @param strategy the strategy to accrue a user's rewards on\n      @param user the user to be accrued\n      @return the cumulative amount of rewards accrued to user (including prior)\n    */\n    function accrue(ERC20 strategy, address user) public returns (uint256) {\n        RewardsState memory state = strategyState[strategy];\n\n        if (state.index == 0) return 0;\n\n        state = accrueStrategy(strategy, state);\n        return accrueUser(strategy, user, state);\n    }\n\n    /** \n      @notice accrue rewards for a two users on a strategy\n      @param strategy the strategy to accrue a user's rewards on\n      @param user the first user to be accrued\n      @param user the second user to be accrued\n      @return the cumulative amount of rewards accrued to the first user (including prior)\n      @return the cumulative amount of rewards accrued to the second user (including prior)\n    */\n    function accrue(\n        ERC20 strategy,\n        address user,\n        address secondUser\n    ) public returns (uint256, uint256) {\n        RewardsState memory state = strategyState[strategy];\n\n        if (state.index == 0) return (0, 0);\n\n        state = accrueStrategy(strategy, state);\n        return (accrueUser(strategy, user, state), accrueUser(strategy, secondUser, state));\n    }\n\n    /** \n      @notice claim rewards for a given user\n      @param user the user claiming rewards\n      @dev this function is public, and all rewards transfer to the user\n    */\n    function claimRewards(address user) external {\n        uint256 accrued = rewardsAccrued[user];\n\n        if (accrued != 0) {\n            rewardsAccrued[user] = 0;\n\n            rewardToken.safeTransferFrom(address(flywheelRewards), user, accrued);\n\n            emit ClaimRewards(user, accrued);\n        }\n    }\n\n    /*///////////////////////////////////////////////////////////////\n                          ADMIN LOGIC\n    //////////////////////////////////////////////////////////////*/\n\n    /** \n      @notice Emitted when a new strategy is added to flywheel by the admin\n      @param newStrategy the new added strategy\n    */\n    event AddStrategy(address indexed newStrategy);\n\n    /// @notice initialize a new strategy\n    function addStrategyForRewards(ERC20 strategy) external requiresAuth {\n        _addStrategyForRewards(strategy);\n    }\n\n    function _addStrategyForRewards(ERC20 strategy) internal {\n        require(strategyState[strategy].index == 0, \"strategy\");\n        strategyState[strategy] = RewardsState({index: ONE, lastUpdatedTimestamp: block.timestamp.safeCastTo32()});\n\n        allStrategies.push(strategy);\n        emit AddStrategy(address(strategy));\n    }\n\n    function getAllStrategies() external view returns (ERC20[] memory) {\n        return allStrategies;\n    }\n\n    /** \n      @notice Emitted when the rewards module changes\n      @param newFlywheelRewards the new rewards module\n    */\n    event FlywheelRewardsUpdate(address indexed newFlywheelRewards);\n\n    /// @notice swap out the flywheel rewards contract\n    function setFlywheelRewards(IFlywheelRewards newFlywheelRewards) external requiresAuth {\n        uint256 oldRewardBalance = rewardToken.balanceOf(address(flywheelRewards));\n        if (oldRewardBalance > 0) {\n            rewardToken.safeTransferFrom(address(flywheelRewards), address(newFlywheelRewards), oldRewardBalance);\n        }\n\n        flywheelRewards = newFlywheelRewards;\n\n        emit FlywheelRewardsUpdate(address(newFlywheelRewards));\n    }\n\n    /** \n      @notice Emitted when the booster module changes\n      @param newBooster the new booster module\n    */\n    event FlywheelBoosterUpdate(address indexed newBooster);\n\n    /// @notice swap out the flywheel booster contract\n    function setBooster(IFlywheelBooster newBooster) external requiresAuth {\n        flywheelBooster = newBooster;\n\n        emit FlywheelBoosterUpdate(address(newBooster));\n    }\n\n    /*///////////////////////////////////////////////////////////////\n                    INTERNAL ACCOUNTING LOGIC\n    //////////////////////////////////////////////////////////////*/\n\n    struct RewardsState {\n        /// @notice The strategy's last updated index\n        uint224 index;\n        /// @notice The timestamp the index was last updated at\n        uint32 lastUpdatedTimestamp;\n    }\n\n    /// @notice the fixed point factor of flywheel\n    uint224 public constant ONE = 1e18;\n\n    /// @notice The strategy index and last updated per strategy\n    mapping(ERC20 => RewardsState) public strategyState;\n\n    /// @notice user index per strategy\n    mapping(ERC20 => mapping(address => uint224)) public userIndex;\n\n    /// @notice accumulate global rewards on a strategy\n    function accrueStrategy(ERC20 strategy, RewardsState memory state)\n        private\n        returns (RewardsState memory rewardsState)\n    {\n        // calculate accrued rewards through module\n        uint256 strategyRewardsAccrued = flywheelRewards.getAccruedRewards(strategy, state.lastUpdatedTimestamp);\n\n        rewardsState = state;\n        if (strategyRewardsAccrued > 0) {\n            // use the booster or token supply to calculate reward index denominator\n            uint256 supplyTokens = address(flywheelBooster) != address(0)\n                ? flywheelBooster.boostedTotalSupply(strategy)\n                : strategy.totalSupply();\n\n            uint224 deltaIndex;\n\n            if (supplyTokens != 0) deltaIndex = ((strategyRewardsAccrued * ONE) / supplyTokens).safeCastTo224();\n\n            // accumulate rewards per token onto the index, multiplied by fixed-point factor\n            rewardsState = RewardsState({\n                index: state.index + deltaIndex,\n                lastUpdatedTimestamp: block.timestamp.safeCastTo32()\n            });\n            strategyState[strategy] = rewardsState;\n        }\n    }\n\n    /// @notice accumulate rewards on a strategy for a specific user\n    function accrueUser(\n        ERC20 strategy,\n        address user,\n        RewardsState memory state\n    ) private returns (uint256) {\n        // load indices\n        uint224 strategyIndex = state.index;\n        uint224 supplierIndex = userIndex[strategy][user];\n\n        // sync user index to global\n        userIndex[strategy][user] = strategyIndex;\n\n        // if user hasn't yet accrued rewards, grant them interest from the strategy beginning if they have a balance\n        // zero balances will have no effect other than syncing to global index\n        if (supplierIndex == 0) {\n            supplierIndex = ONE;\n        }\n\n        uint224 deltaIndex = strategyIndex - supplierIndex;\n        // use the booster or token balance to calculate reward balance multiplier\n        uint256 supplierTokens = address(flywheelBooster) != address(0)\n            ? flywheelBooster.boostedBalanceOf(strategy, user)\n            : strategy.balanceOf(user);\n\n        // accumulate rewards by multiplying user tokens by rewardsPerToken index and adding on unclaimed\n        uint256 supplierDelta = (supplierTokens * deltaIndex) / ONE;\n        uint256 supplierAccrued = rewardsAccrued[user] + supplierDelta;\n\n        rewardsAccrued[user] = supplierAccrued;\n\n        emit AccrueRewards(strategy, user, supplierDelta, strategyIndex);\n\n        return supplierAccrued;\n    }\n}\n"
    },
    "lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/ContextUpgradeable.sol\";\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    function __Ownable_init() internal onlyInitializing {\n        __Ownable_init_unchained();\n    }\n\n    function __Ownable_init_unchained() internal onlyInitializing {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"
    },
    "lib/solmate/src/auth/authorities/RolesAuthority.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-only\npragma solidity >=0.8.0;\n\nimport {Auth, Authority} from \"../Auth.sol\";\n\n/// @notice Role based Authority that supports up to 256 roles.\n/// @author Solmate (https://github.com/transmissions11/solmate/blob/main/src/auth/authorities/RolesAuthority.sol)\n/// @author Modified from Dappsys (https://github.com/dapphub/ds-roles/blob/master/src/roles.sol)\ncontract RolesAuthority is Auth, Authority {\n    /*//////////////////////////////////////////////////////////////\n                                 EVENTS\n    //////////////////////////////////////////////////////////////*/\n\n    event UserRoleUpdated(address indexed user, uint8 indexed role, bool enabled);\n\n    event PublicCapabilityUpdated(address indexed target, bytes4 indexed functionSig, bool enabled);\n\n    event RoleCapabilityUpdated(uint8 indexed role, address indexed target, bytes4 indexed functionSig, bool enabled);\n\n    /*//////////////////////////////////////////////////////////////\n                               CONSTRUCTOR\n    //////////////////////////////////////////////////////////////*/\n\n    constructor(address _owner, Authority _authority) Auth(_owner, _authority) {}\n\n    /*//////////////////////////////////////////////////////////////\n                            ROLE/USER STORAGE\n    //////////////////////////////////////////////////////////////*/\n\n    mapping(address => bytes32) public getUserRoles;\n\n    mapping(address => mapping(bytes4 => bool)) public isCapabilityPublic;\n\n    mapping(address => mapping(bytes4 => bytes32)) public getRolesWithCapability;\n\n    function doesUserHaveRole(address user, uint8 role) public view virtual returns (bool) {\n        return (uint256(getUserRoles[user]) >> role) & 1 != 0;\n    }\n\n    function doesRoleHaveCapability(\n        uint8 role,\n        address target,\n        bytes4 functionSig\n    ) public view virtual returns (bool) {\n        return (uint256(getRolesWithCapability[target][functionSig]) >> role) & 1 != 0;\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                           AUTHORIZATION LOGIC\n    //////////////////////////////////////////////////////////////*/\n\n    function canCall(\n        address user,\n        address target,\n        bytes4 functionSig\n    ) public view virtual override returns (bool) {\n        return\n            isCapabilityPublic[target][functionSig] ||\n            bytes32(0) != getUserRoles[user] & getRolesWithCapability[target][functionSig];\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                   ROLE CAPABILITY CONFIGURATION LOGIC\n    //////////////////////////////////////////////////////////////*/\n\n    function setPublicCapability(\n        address target,\n        bytes4 functionSig,\n        bool enabled\n    ) public virtual requiresAuth {\n        isCapabilityPublic[target][functionSig] = enabled;\n\n        emit PublicCapabilityUpdated(target, functionSig, enabled);\n    }\n\n    function setRoleCapability(\n        uint8 role,\n        address target,\n        bytes4 functionSig,\n        bool enabled\n    ) public virtual requiresAuth {\n        if (enabled) {\n            getRolesWithCapability[target][functionSig] |= bytes32(1 << role);\n        } else {\n            getRolesWithCapability[target][functionSig] &= ~bytes32(1 << role);\n        }\n\n        emit RoleCapabilityUpdated(role, target, functionSig, enabled);\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                       USER ROLE ASSIGNMENT LOGIC\n    //////////////////////////////////////////////////////////////*/\n\n    function setUserRole(\n        address user,\n        uint8 role,\n        bool enabled\n    ) public virtual requiresAuth {\n        if (enabled) {\n            getUserRoles[user] |= bytes32(1 << role);\n        } else {\n            getUserRoles[user] &= ~bytes32(1 << role);\n        }\n\n        emit UserRoleUpdated(user, role, enabled);\n    }\n}\n"
    },
    "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/utils/Initializable.sol)\n\npragma solidity ^0.8.2;\n\nimport \"../../utils/AddressUpgradeable.sol\";\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     * @custom:oz-retyped-from bool\n     */\n    uint8 private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint8 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts.\n     *\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\n     * constructor.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier initializer() {\n        bool isTopLevelCall = !_initializing;\n        require(\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\n            \"Initializable: contract is already initialized\"\n        );\n        _initialized = 1;\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\n     * are added through upgrades and that require initialization.\n     *\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     *\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier reinitializer(uint8 version) {\n        require(!_initializing && _initialized < version, \"Initializable: contract is already initialized\");\n        _initialized = version;\n        _initializing = true;\n        _;\n        _initializing = false;\n        emit Initialized(version);\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     *\n     * Emits an {Initialized} event the first time it is successfully executed.\n     */\n    function _disableInitializers() internal virtual {\n        require(!_initializing, \"Initializable: contract is initializing\");\n        if (_initialized < type(uint8).max) {\n            _initialized = type(uint8).max;\n            emit Initialized(type(uint8).max);\n        }\n    }\n\n    /**\n     * @dev Internal function that returns the initialized version. Returns `_initialized`\n     */\n    function _getInitializedVersion() internal view returns (uint8) {\n        return _initialized;\n    }\n\n    /**\n     * @dev Internal function that returns the initialized version. Returns `_initializing`\n     */\n    function _isInitializing() internal view returns (bool) {\n        return _initializing;\n    }\n}\n"
    },
    "lib/openzeppelin-contracts/contracts/proxy/ERC1967/ERC1967Proxy.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/ERC1967/ERC1967Proxy.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../Proxy.sol\";\nimport \"./ERC1967Upgrade.sol\";\n\n/**\n * @dev This contract implements an upgradeable proxy. It is upgradeable because calls are delegated to an\n * implementation address that can be changed. This address is stored in storage in the location specified by\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967], so that it doesn't conflict with the storage layout of the\n * implementation behind the proxy.\n */\ncontract ERC1967Proxy is Proxy, ERC1967Upgrade {\n    /**\n     * @dev Initializes the upgradeable proxy with an initial implementation specified by `_logic`.\n     *\n     * If `_data` is nonempty, it's used as data in a delegate call to `_logic`. This will typically be an encoded\n     * function call, and allows initializing the storage of the proxy like a Solidity constructor.\n     */\n    constructor(address _logic, bytes memory _data) payable {\n        _upgradeToAndCall(_logic, _data, false);\n    }\n\n    /**\n     * @dev Returns the current implementation address.\n     */\n    function _implementation() internal view virtual override returns (address impl) {\n        return ERC1967Upgrade._getImplementation();\n    }\n}\n"
    },
    "lib/solmate/src/auth/Auth.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-only\npragma solidity >=0.8.0;\n\n/// @notice Provides a flexible and updatable auth pattern which is completely separate from application logic.\n/// @author Solmate (https://github.com/transmissions11/solmate/blob/main/src/auth/Auth.sol)\n/// @author Modified from Dappsys (https://github.com/dapphub/ds-auth/blob/master/src/auth.sol)\nabstract contract Auth {\n    event OwnerUpdated(address indexed user, address indexed newOwner);\n\n    event AuthorityUpdated(address indexed user, Authority indexed newAuthority);\n\n    address public owner;\n\n    Authority public authority;\n\n    constructor(address _owner, Authority _authority) {\n        owner = _owner;\n        authority = _authority;\n\n        emit OwnerUpdated(msg.sender, _owner);\n        emit AuthorityUpdated(msg.sender, _authority);\n    }\n\n    modifier requiresAuth() virtual {\n        require(isAuthorized(msg.sender, msg.sig), \"UNAUTHORIZED\");\n\n        _;\n    }\n\n    function isAuthorized(address user, bytes4 functionSig) internal view virtual returns (bool) {\n        Authority auth = authority; // Memoizing authority saves us a warm SLOAD, around 100 gas.\n\n        // Checking if the caller is the owner only after calling the authority saves gas in most cases, but be\n        // aware that this makes protected functions uncallable even to the owner if the authority is out of order.\n        return (address(auth) != address(0) && auth.canCall(user, address(this), functionSig)) || user == owner;\n    }\n\n    function setAuthority(Authority newAuthority) public virtual {\n        // We check if the caller is the owner first because we want to ensure they can\n        // always swap out the authority even if it's reverting or using up a lot of gas.\n        require(msg.sender == owner || authority.canCall(msg.sender, address(this), msg.sig));\n\n        authority = newAuthority;\n\n        emit AuthorityUpdated(msg.sender, newAuthority);\n    }\n\n    function setOwner(address newOwner) public virtual requiresAuth {\n        owner = newOwner;\n\n        emit OwnerUpdated(msg.sender, newOwner);\n    }\n}\n\n/// @notice A generic interface for a contract which provides authorization data to an Auth instance.\n/// @author Solmate (https://github.com/transmissions11/solmate/blob/main/src/auth/Auth.sol)\n/// @author Modified from Dappsys (https://github.com/dapphub/ds-auth/blob/master/src/auth.sol)\ninterface Authority {\n    function canCall(\n        address user,\n        address target,\n        bytes4 functionSig\n    ) external view returns (bool);\n}\n"
    },
    "lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal onlyInitializing {\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"
    },
    "lib/openzeppelin-contracts/contracts/proxy/Proxy.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/Proxy.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\n * instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\n * be specified by overriding the virtual {_implementation} function.\n *\n * Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\n * different contract through the {_delegate} function.\n *\n * The success and return data of the delegated call will be returned back to the caller of the proxy.\n */\nabstract contract Proxy {\n    /**\n     * @dev Delegates the current call to `implementation`.\n     *\n     * This function does not return to its internal call site, it will return directly to the external caller.\n     */\n    function _delegate(address implementation) internal virtual {\n        assembly {\n            // Copy msg.data. We take full control of memory in this inline assembly\n            // block because it will not return to Solidity code. We overwrite the\n            // Solidity scratch pad at memory position 0.\n            calldatacopy(0, 0, calldatasize())\n\n            // Call the implementation.\n            // out and outsize are 0 because we don't know the size yet.\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\n\n            // Copy the returned data.\n            returndatacopy(0, 0, returndatasize())\n\n            switch result\n            // delegatecall returns 0 on error.\n            case 0 {\n                revert(0, returndatasize())\n            }\n            default {\n                return(0, returndatasize())\n            }\n        }\n    }\n\n    /**\n     * @dev This is a virtual function that should be overridden so it returns the address to which the fallback function\n     * and {_fallback} should delegate.\n     */\n    function _implementation() internal view virtual returns (address);\n\n    /**\n     * @dev Delegates the current call to the address returned by `_implementation()`.\n     *\n     * This function does not return to its internal call site, it will return directly to the external caller.\n     */\n    function _fallback() internal virtual {\n        _beforeFallback();\n        _delegate(_implementation());\n    }\n\n    /**\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\n     * function in the contract matches the call data.\n     */\n    fallback() external payable virtual {\n        _fallback();\n    }\n\n    /**\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if call data\n     * is empty.\n     */\n    receive() external payable virtual {\n        _fallback();\n    }\n\n    /**\n     * @dev Hook that is called before falling back to the implementation. Can happen as part of a manual `_fallback`\n     * call, or as part of the Solidity `fallback` or `receive` functions.\n     *\n     * If overridden should call `super._beforeFallback()`.\n     */\n    function _beforeFallback() internal virtual {}\n}\n"
    },
    "lib/openzeppelin-contracts/contracts/proxy/ERC1967/ERC1967Upgrade.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/ERC1967/ERC1967Upgrade.sol)\n\npragma solidity ^0.8.2;\n\nimport \"../beacon/IBeacon.sol\";\nimport \"../../interfaces/draft-IERC1822.sol\";\nimport \"../../utils/Address.sol\";\nimport \"../../utils/StorageSlot.sol\";\n\n/**\n * @dev This abstract contract provides getters and event emitting update functions for\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\n *\n * _Available since v4.1._\n *\n * @custom:oz-upgrades-unsafe-allow delegatecall\n */\nabstract contract ERC1967Upgrade {\n    // This is the keccak-256 hash of \"eip1967.proxy.rollback\" subtracted by 1\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\n\n    /**\n     * @dev Storage slot with the address of the current implementation.\n     * This is the keccak-256 hash of \"eip1967.proxy.implementation\" subtracted by 1, and is\n     * validated in the constructor.\n     */\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n\n    /**\n     * @dev Emitted when the implementation is upgraded.\n     */\n    event Upgraded(address indexed implementation);\n\n    /**\n     * @dev Returns the current implementation address.\n     */\n    function _getImplementation() internal view returns (address) {\n        return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the EIP1967 implementation slot.\n     */\n    function _setImplementation(address newImplementation) private {\n        require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n        StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n    }\n\n    /**\n     * @dev Perform implementation upgrade\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeTo(address newImplementation) internal {\n        _setImplementation(newImplementation);\n        emit Upgraded(newImplementation);\n    }\n\n    /**\n     * @dev Perform implementation upgrade with additional setup call.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeToAndCall(\n        address newImplementation,\n        bytes memory data,\n        bool forceCall\n    ) internal {\n        _upgradeTo(newImplementation);\n        if (data.length > 0 || forceCall) {\n            Address.functionDelegateCall(newImplementation, data);\n        }\n    }\n\n    /**\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeToAndCallUUPS(\n        address newImplementation,\n        bytes memory data,\n        bool forceCall\n    ) internal {\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\n        if (StorageSlot.getBooleanSlot(_ROLLBACK_SLOT).value) {\n            _setImplementation(newImplementation);\n        } else {\n            try IERC1822Proxiable(newImplementation).proxiableUUID() returns (bytes32 slot) {\n                require(slot == _IMPLEMENTATION_SLOT, \"ERC1967Upgrade: unsupported proxiableUUID\");\n            } catch {\n                revert(\"ERC1967Upgrade: new implementation is not UUPS\");\n            }\n            _upgradeToAndCall(newImplementation, data, forceCall);\n        }\n    }\n\n    /**\n     * @dev Storage slot with the admin of the contract.\n     * This is the keccak-256 hash of \"eip1967.proxy.admin\" subtracted by 1, and is\n     * validated in the constructor.\n     */\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\n\n    /**\n     * @dev Emitted when the admin account has changed.\n     */\n    event AdminChanged(address previousAdmin, address newAdmin);\n\n    /**\n     * @dev Returns the current admin.\n     */\n    function _getAdmin() internal view returns (address) {\n        return StorageSlot.getAddressSlot(_ADMIN_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the EIP1967 admin slot.\n     */\n    function _setAdmin(address newAdmin) private {\n        require(newAdmin != address(0), \"ERC1967: new admin is the zero address\");\n        StorageSlot.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\n    }\n\n    /**\n     * @dev Changes the admin of the proxy.\n     *\n     * Emits an {AdminChanged} event.\n     */\n    function _changeAdmin(address newAdmin) internal {\n        emit AdminChanged(_getAdmin(), newAdmin);\n        _setAdmin(newAdmin);\n    }\n\n    /**\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\n     */\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\n\n    /**\n     * @dev Emitted when the beacon is upgraded.\n     */\n    event BeaconUpgraded(address indexed beacon);\n\n    /**\n     * @dev Returns the current beacon.\n     */\n    function _getBeacon() internal view returns (address) {\n        return StorageSlot.getAddressSlot(_BEACON_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\n     */\n    function _setBeacon(address newBeacon) private {\n        require(Address.isContract(newBeacon), \"ERC1967: new beacon is not a contract\");\n        require(\n            Address.isContract(IBeacon(newBeacon).implementation()),\n            \"ERC1967: beacon implementation is not a contract\"\n        );\n        StorageSlot.getAddressSlot(_BEACON_SLOT).value = newBeacon;\n    }\n\n    /**\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\n     *\n     * Emits a {BeaconUpgraded} event.\n     */\n    function _upgradeBeaconToAndCall(\n        address newBeacon,\n        bytes memory data,\n        bool forceCall\n    ) internal {\n        _setBeacon(newBeacon);\n        emit BeaconUpgraded(newBeacon);\n        if (data.length > 0 || forceCall) {\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\n        }\n    }\n}\n"
    },
    "lib/openzeppelin-contracts/contracts/proxy/beacon/IBeacon.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\n */\ninterface IBeacon {\n    /**\n     * @dev Must return an address that can be used as a delegate call target.\n     *\n     * {BeaconProxy} will check that this address is a contract.\n     */\n    function implementation() external view returns (address);\n}\n"
    },
    "lib/openzeppelin-contracts/contracts/interfaces/draft-IERC1822.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\n * proxy whose upgrades are fully controlled by the current implementation.\n */\ninterface IERC1822Proxiable {\n    /**\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\n     * address.\n     *\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\n     * function revert if invoked through a proxy.\n     */\n    function proxiableUUID() external view returns (bytes32);\n}\n"
    },
    "lib/openzeppelin-contracts/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"
    },
    "lib/openzeppelin-contracts/contracts/utils/StorageSlot.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for reading and writing primitive types to specific storage slots.\n *\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\n * This library helps with reading and writing to such slots without the need for inline assembly.\n *\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\n *\n * Example usage to set ERC1967 implementation slot:\n * ```\n * contract ERC1967 {\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n *\n *     function _getImplementation() internal view returns (address) {\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n *     }\n *\n *     function _setImplementation(address newImplementation) internal {\n *         require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n *     }\n * }\n * ```\n *\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\n */\nlibrary StorageSlot {\n    struct AddressSlot {\n        address value;\n    }\n\n    struct BooleanSlot {\n        bool value;\n    }\n\n    struct Bytes32Slot {\n        bytes32 value;\n    }\n\n    struct Uint256Slot {\n        uint256 value;\n    }\n\n    /**\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\n     */\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\n     */\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\n     */\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\n     */\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n}\n"
    }
  },
  "settings": {
    "remappings": [
      "flywheel/=lib/flywheel-v2/src/",
      "solidity-bytes-utils/=lib/solidity-bytes-utils/",
      "@openzeppelin/=lib/openzeppelin-contracts/",
      "@pythnetwork/pyth-sdk-solidity/=lib/pyth-sdk-solidity/",
      "ds-test/=lib/forge-std/lib/ds-test/src/",
      "flywheel-v2/=lib/flywheel-v2/src/",
      "forge-std/=lib/forge-std/src/",
      "fuse-flywheel/=lib/fuse-flywheel/src/",
      "libcompound/=lib/fuse-flywheel/lib/libcompound/src/",
      "openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/",
      "openzeppelin-contracts/=lib/openzeppelin-contracts/",
      "ops/=lib/ops/contracts/",
      "pyth-neon/=lib/pyth-neon/contracts/",
      "pyth-sdk-solidity/=lib/pyth-sdk-solidity/",
      "solmate/=lib/solmate/src/",
      "weird-erc20/=lib/fuse-flywheel/lib/libcompound/lib/solmate/lib/weird-erc20/src/"
    ],
    "optimizer": { "enabled": true, "runs": 200 },
    "metadata": { "useLiteralContent": false, "bytecodeHash": "none" },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata"
        ]
      }
    },
    "evmVersion": "london",
    "viaIR": false,
    "libraries": {}
  }
}
